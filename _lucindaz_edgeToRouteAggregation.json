{"paragraphs":[{"text":"tancimport org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.sql.functions.{abs, col}\nimport org.apache.spark.sql.SaveMode\nimport spark.implicits._\n","user":"anonymous","dateUpdated":"2020-01-10T16:34:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.sql.functions.{abs, col}\nimport org.apache.spark.sql.SaveMode\nimport spark.implicits._\n"}]},"apps":[],"jobName":"paragraph_1578339374195_1231797223","id":"20200106-182031_739474902","dateCreated":"2020-01-06T19:36:14+0000","dateStarted":"2020-01-10T05:28:29+0000","dateFinished":"2020-01-10T05:28:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:109692"},{"text":"val athlete = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/featureVector\")\nathlete.printSchema\n\nval edge = spark.read.load(\"s3a://strava.scratch/gbm/bay-area/edgeFeature\")\nedge.printSchema\n\nval activityDf = spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/edgesPerActivityTest\").filter(\"activityType == 'Run'\")\nactivityDf.printSchema","user":"anonymous","dateUpdated":"2020-01-10T05:28:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"athlete: org.apache.spark.sql.DataFrame = [ATHLETE_ID: decimal(38,0), features: vector ... 1 more field]\nroot\n |-- ATHLETE_ID: decimal(38,0) (nullable = true)\n |-- features: vector (nullable = true)\n |-- datestr: date (nullable = true)\n\nedge: org.apache.spark.sql.DataFrame = [edgeUID: bigint, features: vector]\nroot\n |-- edgeUID: long (nullable = true)\n |-- features: vector (nullable = true)\n\nactivityDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [activityId: bigint, athleteId: bigint ... 10 more fields]\nroot\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- activityType: string (nullable = true)\n |-- startDateLocal: double (nullable = true)\n |-- edgeList: array (nullable = true)\n |    |-- element: long (containsNull = true)\n |-- durationList: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- distanceList: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- coverageList: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- elapsedTimeSum: double (nullable = true)\n |-- elapsedTime: integer (nullable = true)\n |-- movingTime: integer (nullable = true)\n |-- key: integer (nullable = true)\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=547","true/jobs/job?id=547","true/jobs/job?id=549","true/jobs/job?id=549","true/jobs/job?id=550","true/jobs/job?id=550","true/jobs/job?id=552","true/jobs/job?id=552"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578339715870_-2085589614","id":"20200106-194155_398311135","dateCreated":"2020-01-06T19:41:55+0000","dateStarted":"2020-01-10T05:28:35+0000","dateFinished":"2020-01-10T05:28:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109693"},{"text":"athlete.createOrReplaceTempView(\"athletes\")\nedge.createOrReplaceTempView(\"edges\")\nactivityDf.createOrReplaceTempView(\"activity\")\n","user":"anonymous","dateUpdated":"2020-01-10T05:28:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578344815253_-2027423211","id":"20200106-210655_800743212","dateCreated":"2020-01-06T21:06:55+0000","dateStarted":"2020-01-10T05:28:40+0000","dateFinished":"2020-01-10T05:28:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109694"},{"text":"val myQuery = \"\"\"\nwith x as (\n\n    SELECT activityId, edgeUID, athleteId\n    FROM\n    activity\n    lateral view explode(edgeList) exploded_table as edgeUID\n\n)\n\n\nselect x.activityId, x.edgeUID, x.athleteId, edges.features as edgeFeature, athletes.features as athleteFeature\n\nfrom x join edges\non edges.edgeUID = x.edgeUID\njoin athletes\non x.athleteId = athletes.ATHLETE_ID\n\n\n\"\"\"\n\nval result = spark.sql(myQuery)\n","user":"anonymous","dateUpdated":"2020-01-07T18:45:22+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nwith x as (\n\n    SELECT activityId, edgeUID, athleteId\n    FROM\n    activity\n    lateral view explode(edgeList) exploded_table as edgeUID\n\n)\n\n\nselect x.activityId, x.edgeUID, x.athleteId, edges.features as edgeFeature, athletes.features as athleteFeature\n\nfrom x join edges\non edges.edgeUID = x.edgeUID\njoin athletes\non x.athleteId = athletes.ATHLETE_ID\n\n\n\"\nresult: org.apache.spark.sql.DataFrame = [activityId: bigint, edgeUID: bigint ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578339374208_1759445627","id":"20200102-190835_1462885509","dateCreated":"2020-01-06T19:36:14+0000","dateStarted":"2020-01-07T18:45:22+0000","dateFinished":"2020-01-07T18:45:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109695"},{"text":"// assemble vector and run prediction\n\nimport org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.ml.linalg.{DenseVector, Vector, Vectors}\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{DecimalType, DoubleType, IntegerType, LongType}\n  def assembleFeature(x: DataFrame, featureCols: Array[String]): DataFrame = {\n    val assembler = new VectorAssembler()\n      .setInputCols(featureCols)\n      .setOutputCol(\"features\")\n\n    val output = assembler.transform(x)\n    output.drop(featureCols: _*)\n  }\n \n \nval df1 = assembleFeature(result.withColumn(\"is_best_effort\", lit(1.0)).withColumn(\"isBestEffort\", lit(1.0)), Array(\"is_best_effort\", \"edgeFeature\", \"athleteFeature\"))\n\nval df2 = assembleFeature(result.withColumn(\"is_best_effort\", lit(0.0)).withColumn(\"isBestEffort\", lit(0.0)), Array(\"is_best_effort\", \"edgeFeature\", \"athleteFeature\"))\n\nval df3 = df1.union(df2)","user":"anonymous","dateUpdated":"2020-01-07T18:45:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.ml.linalg.{DenseVector, Vector, Vectors}\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{DecimalType, DoubleType, IntegerType, LongType}\nassembleFeature: (x: org.apache.spark.sql.DataFrame, featureCols: Array[String])org.apache.spark.sql.DataFrame\ndf1: org.apache.spark.sql.DataFrame = [activityId: bigint, edgeUID: bigint ... 3 more fields]\ndf2: org.apache.spark.sql.DataFrame = [activityId: bigint, edgeUID: bigint ... 3 more fields]\ndf3: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [activityId: bigint, edgeUID: bigint ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578345036305_466578366","id":"20200106-211036_1593689841","dateCreated":"2020-01-06T21:10:36+0000","dateStarted":"2020-01-07T18:45:39+0000","dateFinished":"2020-01-07T18:45:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109696"},{"text":"val path = s\"s3a://strava.scratch/gbm/bay-area/etaModel/version0.2.1\"\n\nval modelPipeline = PipelineModel.load(path)\n","user":"anonymous","dateUpdated":"2020-01-07T18:45:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"path: String = s3a://strava.scratch/gbm/bay-area/etaModel/version0.2.1\nmodelPipeline: org.apache.spark.ml.PipelineModel = pipeline_ed69c3480156\n"}]},"apps":[],"jobName":"paragraph_1578346939518_-1392377508","id":"20200106-214219_1369185207","dateCreated":"2020-01-06T21:42:19+0000","dateStarted":"2020-01-07T18:45:45+0000","dateFinished":"2020-01-07T18:45:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109697"},{"text":"val testResult = modelPipeline.transform(df3).drop(\"features\").drop(\"slicedFeatures\")\n\ntestResult.repartition(20).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(\"s3a://strava.scratch/gbm/bay-area/etaResult/version0.2.1/testRoutesFull\")\n","user":"anonymous","dateUpdated":"2020-01-07T18:47:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"testResult: org.apache.spark.sql.DataFrame = [activityId: bigint, edgeUID: bigint ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578346938212_2084589318","id":"20200106-214218_1622590192","dateCreated":"2020-01-06T21:42:18+0000","dateStarted":"2020-01-07T18:47:31+0000","dateFinished":"2020-01-07T19:35:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109698"},{"text":"val testResult = spark.read.load(\"s3a://strava.scratch/gbm/bay-area/etaResult/version0.2.1/testRoutesFull\")\ntestResult.printSchema\n\ntestResult.createOrReplaceTempView(\"temp\")\n\nval edgeMeta = spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/edgeMeta\").selectExpr(\"id\", \"properties.length\")\nedgeMeta.createOrReplaceTempView(\"meta\")\n","user":"anonymous","dateUpdated":"2020-01-10T05:29:05+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"testResult: org.apache.spark.sql.DataFrame = [activityId: bigint, edgeUID: bigint ... 3 more fields]\nroot\n |-- activityId: long (nullable = true)\n |-- edgeUID: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- isBestEffort: double (nullable = true)\n |-- ETA: double (nullable = true)\n\nedgeMeta: org.apache.spark.sql.DataFrame = [id: int, length: double]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=559","true/jobs/job?id=559","true/jobs/job?id=560","true/jobs/job?id=560"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578350245413_-1161702940","id":"20200106-223725_33069531","dateCreated":"2020-01-06T22:37:25+0000","dateStarted":"2020-01-10T05:29:05+0000","dateFinished":"2020-01-10T05:29:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109699"},{"text":"val myQuery = \"\"\"\nwith x as (\nselect \nactivityId, isBestEffort, athleteId, sum(ETA) as routeEstimation, count(1) as numEdgeSummed, sum(meta.length) as distance\nfrom temp join meta\non abs(temp.edgeUID) = meta.id\n\ngroup by activityId, isBestEffort, athleteId\n),\n\ny as (\nselect \nactivityId, size(edgeList) as numEdge, elapsedTimeSum, elapsedTime, movingTime, elapsedTimeSum*movingTime/elapsedTime as truth\nfrom activity\n)\n\nselect x.activityId, x.isBestEffort, x.athleteId, x.routeEstimation, x.numEdgeSummed, x.distance, y.numEdge, y.elapsedTimeSum, y.elapsedTime, y.movingTime, y.truth\nfrom x join y on x.activityId = y.activityId\n\"\"\"\n\nval routeETA = spark.sql(myQuery)","user":"anonymous","dateUpdated":"2020-01-10T05:29:12+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nwith x as (\nselect\nactivityId, isBestEffort, athleteId, sum(ETA) as routeEstimation, count(1) as numEdgeSummed, sum(meta.length) as distance\nfrom temp join meta\non abs(temp.edgeUID) = meta.id\n\ngroup by activityId, isBestEffort, athleteId\n),\n\ny as (\nselect\nactivityId, size(edgeList) as numEdge, elapsedTimeSum, elapsedTime, movingTime, elapsedTimeSum*movingTime/elapsedTime as truth\nfrom activity\n)\n\nselect x.activityId, x.isBestEffort, x.athleteId, x.routeEstimation, x.numEdgeSummed, x.distance, y.numEdge, y.elapsedTimeSum, y.elapsedTime, y.movingTime, y.truth\nfrom x join y on x.activityId = y.activityId\n\"\nrouteETA: org.apache.spark.sql.DataFrame = [activityId: bigint, isBestEffort: double ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578350243585_789007274","id":"20200106-223723_522173194","dateCreated":"2020-01-06T22:37:23+0000","dateStarted":"2020-01-10T05:29:12+0000","dateFinished":"2020-01-10T05:29:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109700"},{"text":"routeETA.repartition(2).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(\"s3a://strava.scratch/gbm/bay-area/routeResult/version0.0\")\n","user":"anonymous","dateUpdated":"2020-01-10T05:29:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=567","true/jobs/job?id=567","true/jobs/job?id=569","true/jobs/job?id=569"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578614462900_1591311113","id":"20200110-000102_1385468702","dateCreated":"2020-01-10T00:01:02+0000","dateStarted":"2020-01-10T05:29:23+0000","dateFinished":"2020-01-10T05:30:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109701"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578418890785_-527748247","id":"20200107-174130_1860482675","dateCreated":"2020-01-07T17:41:30+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:109702"}],"name":"/lucindaz/edgeToRouteAggregation","id":"2EWJVKJS7","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}