{"paragraphs":[{"text":"import com.strava.commons.spark.util.SnowflakeQuery\n\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\n","user":"anonymous","dateUpdated":"2019-12-18T19:47:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.strava.commons.spark.util.SnowflakeQuery\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\n"}]},"apps":[],"jobName":"paragraph_1575409561843_-1453803558","id":"20191125-201541_1488915145","dateCreated":"2019-12-03T21:46:01+0000","dateStarted":"2019-12-17T19:54:00+0000","dateFinished":"2019-12-17T19:54:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:64948"},{"text":"// VERSION 1: pull whatever available from athlete daily rollup table as athlete features \n// \n// read athlete daily rollup as Spark dataframe\nval mySnowQuery = \"\"\"\nselect * from STRAVA.PUBLIC.ATHLETE_DAILY_ROLLUP\n\"\"\"\n\nval athletes = SnowflakeQuery.read(mySnowQuery)\n","user":"anonymous","dateUpdated":"2019-12-16T19:38:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"mySnowQuery: String =\n\"\nselect * from STRAVA.PUBLIC.ATHLETE_DAILY_ROLLUP\n\"\nathletes: org.apache.spark.sql.DataFrame = [ATHLETE_ID: decimal(38,0), FIRSTNAME: string ... 156 more fields]\n"}]},"apps":[],"jobName":"paragraph_1575409575071_-1192357848","id":"20191203-214615_1431429585","dateCreated":"2019-12-03T21:46:15+0000","dateStarted":"2019-12-03T21:51:02+0000","dateFinished":"2019-12-03T21:51:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64949"},{"text":"// map-side join to filter down athletes for labelled data\n\nspark.read.load(s\"s3a://strava.scratch/gbm/bay-area/etaGroundTruth\").createOrReplaceTempView(\"truth\")\nval ids = broadcast(spark.sql(\"select distinct athleteId from truth\").as[Long].cache())","user":"anonymous","dateUpdated":"2019-12-03T21:55:24+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ids: org.apache.spark.sql.Dataset[Long] = [athleteId: bigint]\n"}]},"apps":[],"jobName":"paragraph_1575409561846_1854451747","id":"20191120-191348_1752848390","dateCreated":"2019-12-03T21:46:01+0000","dateStarted":"2019-12-03T21:55:24+0000","dateFinished":"2019-12-03T21:55:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64950"},{"text":"val athletesDf = athletes.joinWith(ids, athletes(\"ATHLETE_ID\") === ids(\"athleteId\")).select(\"_1.*\")\nathletesDf.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteRollUp\")","user":"anonymous","dateUpdated":"2019-12-04T00:01:03+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"athletesDf: org.apache.spark.sql.DataFrame = [ATHLETE_ID: decimal(38,0), FIRSTNAME: string ... 156 more fields]\n"}]},"apps":[],"jobName":"paragraph_1575409561848_-1041046557","id":"20191126-193814_781885423","dateCreated":"2019-12-03T21:46:01+0000","dateStarted":"2019-12-03T21:57:59+0000","dateFinished":"2019-12-03T21:57:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64951"},{"text":"val df = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/athleteRollUp\")\ndf.printSchema","user":"anonymous","dateUpdated":"2019-12-05T20:06:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [ATHLETE_ID: decimal(38,0), FIRSTNAME: string ... 156 more fields]\nroot\n |-- ATHLETE_ID: decimal(38,0) (nullable = true)\n |-- FIRSTNAME: string (nullable = true)\n |-- LASTNAME: string (nullable = true)\n |-- DATEOFBIRTH: date (nullable = true)\n |-- SEX: string (nullable = true)\n |-- HOME_X: double (nullable = true)\n |-- HOME_Y: double (nullable = true)\n |-- ATHLETE_TYPE: string (nullable = true)\n |-- PRIMARY_SPORT: string (nullable = true)\n |-- REG_DATE: date (nullable = true)\n |-- REG_SOURCE: string (nullable = true)\n |-- GEOHASH: string (nullable = true)\n |-- CITY: string (nullable = true)\n |-- CONTINENT: string (nullable = true)\n |-- COUNTRY: string (nullable = true)\n |-- STATE: string (nullable = true)\n |-- COUNTY: string (nullable = true)\n |-- SIGNUP_CITY: string (nullable = true)\n |-- SIGNUP_CITY_NEW: string (nullable = true)\n |-- SIGNUP_CONTINENT: string (nullable = true)\n |-- SIGNUP_COUNTRY: string (nullable = true)\n |-- SIGNUP_STATE: string (nullable = true)\n |-- SIGNUP_COUNTY: string (nullable = true)\n |-- SIGNUP_X: double (nullable = true)\n |-- SIGNUP_Y: double (nullable = true)\n |-- REG_PLATFORM: string (nullable = true)\n |-- FIRST_UPLOADED_ACTIVITY: decimal(38,0) (nullable = true)\n |-- FIRST_UPLOAD_SPORT: string (nullable = true)\n |-- FIRST_UPLOAD_PLATFORM: string (nullable = true)\n |-- SUM_COHORT: date (nullable = true)\n |-- SUM_DATE: date (nullable = true)\n |-- IS_PREMIUM: decimal(38,0) (nullable = true)\n |-- LAST_TRIAL_OFFER: date (nullable = true)\n |-- IN_PREMIUM_TRIAL: decimal(38,0) (nullable = true)\n |-- LAST_TRIAL_STARTED: date (nullable = true)\n |-- LAST_MOBILE_TRIAL_START_DATE: date (nullable = true)\n |-- SUBSCRIPTION_TYPE: string (nullable = true)\n |-- SUBSCRIPTION_PLATFORM: string (nullable = true)\n |-- LATEST_ACTIVITY_ID: decimal(38,0) (nullable = true)\n |-- LATEST_RIDE_ACTIVITY_ID: decimal(38,0) (nullable = true)\n |-- LATEST_RUN_ACTIVITY_ID: decimal(38,0) (nullable = true)\n |-- LATEST_OTHER_ACTIVITY_ID: decimal(38,0) (nullable = true)\n |-- FIRST_SUBSCRIBE_DATE: date (nullable = true)\n |-- LATEST_SUBSCRIBE_DATE: date (nullable = true)\n |-- FIRST_RECORD_SCREEN_BEACON_SMS_SENT: date (nullable = true)\n |-- LATEST_RECORD_SCREEN_BEACON_SMS_SENT: date (nullable = true)\n |-- FIRST_RECORD_SCREEN_BEACON_TAP: date (nullable = true)\n |-- LATEST_RECORD_SCREEN_BEACON_TAP: date (nullable = true)\n |-- FIRST_BEACON_FOR_GARMIN_USE: date (nullable = true)\n |-- LATEST_BEACON_FOR_GARMIN_USE: date (nullable = true)\n |-- FIRST_BEACON_FOR_STRAVA_USE: date (nullable = true)\n |-- LATEST_BEACON_FOR_STRAVA_USE: date (nullable = true)\n |-- NUM_RETAIL_PURCHASES: decimal(38,0) (nullable = true)\n |-- NET_RETAIL_REVENUE: decimal(18,4) (nullable = true)\n |-- NUM_RIDES: decimal(38,0) (nullable = true)\n |-- NUM_RUNS: decimal(38,0) (nullable = true)\n |-- NUM_SWIMS: decimal(38,0) (nullable = true)\n |-- NUM_RACES: decimal(38,0) (nullable = true)\n |-- NUM_LONG_RUNS: decimal(38,0) (nullable = true)\n |-- NUM_WORKOUTS: decimal(38,0) (nullable = true)\n |-- NUM_GROUP_ACTIVITIES: decimal(38,0) (nullable = true)\n |-- NUM_MATCHED_ATHLETES: decimal(38,0) (nullable = true)\n |-- TOTAL_ACTIVITIES: decimal(38,0) (nullable = true)\n |-- RIDES_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- RUNS_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- SWIMS_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- RIDES_PAST_YEAR: decimal(38,0) (nullable = true)\n |-- RUNS_PAST_YEAR: decimal(38,0) (nullable = true)\n |-- SWIMS_PAST_YEAR: decimal(38,0) (nullable = true)\n |-- TOTAL_ACTIVITIES_PAST_YEAR: decimal(38,0) (nullable = true)\n |-- IS_30D_ACTIVE: decimal(38,0) (nullable = true)\n |-- DAYS_SINCE_LAST_ACTIVE: decimal(38,0) (nullable = true)\n |-- DAYS_SINCE_LAST_UPLOAD: decimal(38,0) (nullable = true)\n |-- IPHONE_UPLOADS: decimal(38,0) (nullable = true)\n |-- ANDROID_UPLOADS: decimal(38,0) (nullable = true)\n |-- OTHER_UPLOADS: decimal(38,0) (nullable = true)\n |-- MANUAL_UPLOADS: decimal(38,0) (nullable = true)\n |-- IPHONE_UPLOADS_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- ANDROID_UPLOADS_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- OTHER_UPLOADS_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- RECENT_PLATFORM_PREV_30_DAYS: string (nullable = true)\n |-- HR_UPLOADS: decimal(38,0) (nullable = true)\n |-- PM_UPLOADS: decimal(38,0) (nullable = true)\n |-- RIDE_SCORE: double (nullable = true)\n |-- RUN_SCORE: double (nullable = true)\n |-- NUM_PHOTO_UPLOADS: decimal(38,0) (nullable = true)\n |-- FIRST_PHOTO_UPLOAD: date (nullable = true)\n |-- IPHONE_30D_FEED_VIEWS: decimal(38,0) (nullable = true)\n |-- IPHONE_30D_ACTIVITY_VIEWS: decimal(38,0) (nullable = true)\n |-- ANDROID_30D_FEED_VIEWS: decimal(38,0) (nullable = true)\n |-- ANDROID_30D_ACTIVITY_VIEWS: decimal(38,0) (nullable = true)\n |-- WEB_30D_FEED_VIEWS: decimal(38,0) (nullable = true)\n |-- WEB_30D_ACTIVITY_VIEWS: decimal(38,0) (nullable = true)\n |-- OTHER_30D_FEED_VIEWS: decimal(38,0) (nullable = true)\n |-- OTHER_30D_ACTIVITY_VIEWS: decimal(38,0) (nullable = true)\n |-- TOTAL_FEED_VIEWS: decimal(38,0) (nullable = true)\n |-- TOTAL_ACTIVITY_VIEWS: decimal(38,0) (nullable = true)\n |-- NUM_FOLLOWERS: decimal(38,0) (nullable = true)\n |-- NUM_FOLLOWING: decimal(38,0) (nullable = true)\n |-- FIRST_FOLLOW_DATE: date (nullable = true)\n |-- KUDOS_RECEIVED: decimal(38,0) (nullable = true)\n |-- KUDOS_GIVEN: decimal(38,0) (nullable = true)\n |-- COMMENTS_RECEIVED: decimal(38,0) (nullable = true)\n |-- COMMENTS_GIVEN: decimal(38,0) (nullable = true)\n |-- NUM_CLUBS_JOINED: decimal(38,0) (nullable = true)\n |-- IS_CLUB_ADMIN: decimal(38,0) (nullable = true)\n |-- CHALLENGES_JOINED: decimal(38,0) (nullable = true)\n |-- CHALLENGES_COMPLETED: decimal(38,0) (nullable = true)\n |-- NUM_INVITES: decimal(38,0) (nullable = true)\n |-- INVITE_JOINS: decimal(38,0) (nullable = true)\n |-- INSTAGRAM_CONNECTED: decimal(38,0) (nullable = true)\n |-- FB_CONNECTED: decimal(38,0) (nullable = true)\n |-- TWITTER_CONNECTED: decimal(38,0) (nullable = true)\n |-- GARMIN_CONNECTED: decimal(38,0) (nullable = true)\n |-- JAWBONE_CONNECTED: decimal(38,0) (nullable = true)\n |-- MYFITNESSPAL_CONNECTED: decimal(38,0) (nullable = true)\n |-- ATHLINKS_CONNECTED: decimal(38,0) (nullable = true)\n |-- GOOGLE_CONNECTED: decimal(38,0) (nullable = true)\n |-- GOOGLE_NOW_CONNECTED: decimal(38,0) (nullable = true)\n |-- VELOVIEWER_CONNECTED: date (nullable = true)\n |-- FITBIT_CONNECTED: date (nullable = true)\n |-- PARKRUN_CONNECTED: date (nullable = true)\n |-- RELIVECC_CONNECTED: date (nullable = true)\n |-- PERFECTOBIKE_CONNECTED: date (nullable = true)\n |-- TARGETING_GROUP: string (nullable = true)\n |-- GARMIN_CONNECTION_DATE: date (nullable = true)\n |-- NUM_DISTANCE_GOALS: decimal(38,0) (nullable = true)\n |-- NUM_TIME_GOALS: decimal(38,0) (nullable = true)\n |-- NUM_POWER_GOALS: decimal(38,0) (nullable = true)\n |-- NUM_SEGMENT_GOALS: decimal(38,0) (nullable = true)\n |-- NUM_SEGMENTS_STARRED: decimal(38,0) (nullable = true)\n |-- NUM_ROUTES_CREATED: decimal(38,0) (nullable = true)\n |-- NUM_KOMS_OWNED: decimal(38,0) (nullable = true)\n |-- ACTIVATED_2U_14D: decimal(38,0) (nullable = true)\n |-- MAU_DAY35: decimal(38,0) (nullable = true)\n |-- WAU_DAY35: decimal(38,0) (nullable = true)\n |-- NUM_ACTIVITIES_DAY14: decimal(38,0) (nullable = true)\n |-- NUM_FOLLOWING_DAY14: decimal(38,0) (nullable = true)\n |-- HAS_UPLOADED_PROFILE_PHOTO: decimal(38,0) (nullable = true)\n |-- NUM_SEGMENTS_CREATED: decimal(38,0) (nullable = true)\n |-- NUM_DORADO_IMPRESSIONS_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- NUM_DORADO_CLICKS_PREV_30_DAYS: decimal(38,0) (nullable = true)\n |-- EOY16_VIDEO_CREATED: decimal(38,0) (nullable = true)\n |-- NUM_ACTIVE_DAYS_7: decimal(38,0) (nullable = true)\n |-- NUM_ACTIVE_DAYS_30: decimal(38,0) (nullable = true)\n |-- NUM_ACTIVE_WEEKS: decimal(38,0) (nullable = true)\n |-- DAYS_SINCE_SEGMENT_GOAL_SET: decimal(38,0) (nullable = true)\n |-- DAYS_SINCE_POWER_GOAL_SET: decimal(38,0) (nullable = true)\n |-- DAYS_SINCE_WEEKLY_GOAL_SET: decimal(38,0) (nullable = true)\n |-- DAYS_SINCE_ANNUAL_GOAL_SET: decimal(38,0) (nullable = true)\n |-- LATEST_ACTIVITY_WITH_POWER: decimal(38,0) (nullable = true)\n |-- LATEST_ACTIVITY_WITH_HR_DATA: decimal(38,0) (nullable = true)\n |-- LATEST_ACTIVITY_WITH_LAPS: decimal(38,0) (nullable = true)\n |-- NUM_ACTIVE_DAYS_28: decimal(38,0) (nullable = true)\n |-- PRIMARY_SPORT_DETAIL_LAST_30D: string (nullable = true)\n |-- MOST_POPULAR_SPORT_LAST_30D: string (nullable = true)\n |-- PRIMARY_FEED_VIEW_PLATFORM_LAST_30D: string (nullable = true)\n |-- PRIMARY_UPLOAD_PLATFORM_LAST_30D: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1575417290515_324409850","id":"20191203-235450_1891377639","dateCreated":"2019-12-03T23:54:50+0000","dateStarted":"2019-12-05T20:06:28+0000","dateFinished":"2019-12-05T20:06:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64952"},{"text":"import org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.sql.DataFrame\n\n\n  val strCols = Array(\"SEX\", \"ATHLETE_TYPE\", \"PRIMARY_SPORT\")\n  val toBucketCols = Array(\"age\", \"reg_age\")\n  val numericCols = Array(\n    \"NUM_RIDES\",\n    \"NUM_RUNS\",\n    \"NUM_SWIMS\",\n    \"NUM_RACES\",\n    \"NUM_LONG_RUNS\",\n    \"NUM_WORKOUTS\",\n    \"NUM_GROUP_ACTIVITIES\",\n    \"NUM_MATCHED_ATHLETES\",\n    \"RIDES_PREV_30_DAYS\",\n    \"RUNS_PREV_30_DAYS\",\n    \"SWIMS_PREV_30_DAYS\",\n    \"RIDES_PAST_YEAR\",\n    \"RUNS_PAST_YEAR\",\n    \"SWIMS_PAST_YEAR\",\n    \"TOTAL_ACTIVITIES_PAST_YEAR\",\n    \"IS_30D_ACTIVE\",\n    \"DAYS_SINCE_LAST_ACTIVE\",\n    \"DAYS_SINCE_LAST_UPLOAD\"\n  )\n  val featureCols = strCols.map(_ + \"_index_encode\") ++ toBucketCols.map(_ + \"_bucket\") ++ numericCols\n  val ageSplits = Range(0, 200, 5).toArray.map(_.toDouble)\n  val regSplits = Range(0, 20, 1).toArray.map(_.toDouble)\n  val splitsArray = Array(ageSplits, regSplits)\n\n\n  def bucketizeCol(x: DataFrame, cols: Array[String], splits: Array[Array[Double]]): DataFrame = {\n    // null is passed down as null\n    val bucketizer = new Bucketizer()\n      .setHandleInvalid(\"keep\")\n      .setInputCols(cols)\n      .setOutputCols(cols.map(_ + \"_bucket\"))\n      .setSplitsArray(splits)\n\n    bucketizer.transform(x).drop(cols: _*)\n\n  }\n\n\n  def indexString(x: DataFrame, cols: Array[String]): DataFrame = {\n    // null will have dedicated index\n    var df = x\n    cols.foreach { c =>\n      val indexer = new StringIndexer()\n        .setInputCol(c)\n        .setOutputCol(c + \"_index\")\n        .setHandleInvalid(\"keep\")\n\n      val fittedIndexer = indexer.fit(x)\n      df = fittedIndexer.transform(df).drop(c)\n    }\n    df\n  }\n\n  def encodeCol(x: DataFrame, cols: Array[String]): DataFrame = {\n    val encoder = new OneHotEncoderEstimator()\n      .setInputCols(cols)\n      .setOutputCols(cols.map(_ + \"_encode\"))\n    val fittedEncoder = encoder.fit(x)\n\n    fittedEncoder.transform(x).drop(cols: _*)\n  }\n\n  def imputeNumericCol(x: DataFrame, cols: Array[String]): DataFrame = {\n    val imputer = new Imputer()\n      .setInputCols(cols)\n      .setOutputCols(cols)\n    val model = imputer.fit(x)\n    model.transform(x)\n\n  }\n\n def pullFeature(x: DataFrame): DataFrame = {\n    // Input from athletes_daily_rollup\nval mySql = \"\"\"\n        select\n        bigint(ATHLETE_ID) as athleteId,\n            CASE WHEN months_between(current_date, DATEOFBIRTH) / 12 < 120 \n         THEN months_between(current_date, DATEOFBIRTH) / 12\n         ELSE 40 END AS age,\n        months_between(current_date, REG_DATE) / 12 as reg_age,\n\n        SEX,\n        ATHLETE_TYPE,\n        PRIMARY_SPORT,\n\n        float(NUM_RIDES),\n        float(NUM_RUNS),\n        float(NUM_SWIMS),\n        float(NUM_RACES),\n        float(NUM_LONG_RUNS),\n        float(NUM_WORKOUTS),\n        float(NUM_GROUP_ACTIVITIES),\n        float(NUM_MATCHED_ATHLETES),\n        float(RIDES_PREV_30_DAYS),\n        float(RUNS_PREV_30_DAYS),\n        float(SWIMS_PREV_30_DAYS),\n        float(RIDES_PAST_YEAR),\n        float(RUNS_PAST_YEAR),\n        float(SWIMS_PAST_YEAR),\n        float(TOTAL_ACTIVITIES_PAST_YEAR),\n        float(IS_30D_ACTIVE),\n        float(DAYS_SINCE_LAST_ACTIVE),\n        float(DAYS_SINCE_LAST_UPLOAD)\n\n        -- GEOHASH,\n        -- COUNTRY,\n        -- STATE\n        from athletes\n        \"\"\"\n    x.createOrReplaceTempView(\"athletes\")\n    spark.sql(mySql)\n\n  }\n\n  def transformFeature(df: DataFrame): DataFrame = {\n\n    val df1 = indexString(df, strCols)\n    val df2 = encodeCol(df1, strCols.map(_ + \"_index\"))\n    val df3 = bucketizeCol(df2, toBucketCols, splitsArray)\n    val df4 = imputeNumericCol(df3, toBucketCols.map(_ + \"_bucket\") ++ numericCols)\n    df4\n  }\n\n  def assembleFeature(x: DataFrame): DataFrame = {\n    val assembler = new VectorAssembler()\n      .setInputCols(featureCols)\n      .setOutputCol(\"features\")\n\n    val output = assembler.transform(x)\n    output.drop(featureCols: _*)\n  }","user":"anonymous","dateUpdated":"2019-12-05T20:56:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.sql.DataFrame\nstrCols: Array[String] = Array(SEX, ATHLETE_TYPE, PRIMARY_SPORT)\ntoBucketCols: Array[String] = Array(age, reg_age)\nnumericCols: Array[String] = Array(NUM_RIDES, NUM_RUNS, NUM_SWIMS, NUM_RACES, NUM_LONG_RUNS, NUM_WORKOUTS, NUM_GROUP_ACTIVITIES, NUM_MATCHED_ATHLETES, RIDES_PREV_30_DAYS, RUNS_PREV_30_DAYS, SWIMS_PREV_30_DAYS, RIDES_PAST_YEAR, RUNS_PAST_YEAR, SWIMS_PAST_YEAR, TOTAL_ACTIVITIES_PAST_YEAR, IS_30D_ACTIVE, DAYS_SINCE_LAST_ACTIVE, DAYS_SINCE_LAST_UPLOAD)\nfeatureCols: Array[String] = Array(SEX_index_encode, ATHLETE_TYPE_index_encode, PRIMARY_SPORT_index_encode, age_bucket, reg_age_bucket, NUM_RIDES, NUM_RUNS, NUM_SWIMS, NUM_RACES, NUM_LONG_RUNS, NUM_WORKOUTS, NUM_GROUP_ACTIVITIES, NUM_MATCHED_ATHLETES, RIDES_PREV_30_DAYS, RUNS_PREV_30_DAYS, SWIMS_PREV_30_DAYS, RIDES_PAST_YEAR, RUNS_PAST_YEAR, SWIMS_PAST_YEAR, TOTAL_ACTIVITIES_PAST_YEAR, IS_30D_ACTIVE, DAYS_SINCE_LAST_ACTIVE, DAYS_SINCE_LAST_UPLOAD)\nageSplits: Array[Double] = Array(0.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0, 125.0, 130.0, 135.0, 140.0, 145.0, 150.0, 155.0, 160.0, 165.0, 170.0, 175.0, 180.0, 185.0, 190.0, 195.0)\nregSplits: Array[Double] = Array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0)\nsplitsArray: Array[Array[Double]] = Array(Array(0.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0, 105.0, 110.0, 115.0, 120.0, 125.0, 130.0, 135.0, 140.0, 145.0, 150.0, 155.0, 160.0, 165.0, 170.0, 175.0, 180.0, 185.0, 190.0, 195.0), Array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0))\nbucketizeCol: (x: org.apache.spark.sql.DataFrame, cols: Array[String], splits: Array[Array[Double]])org.apache.spark.sql.DataFrame\nindexString: (x: org.apache.spark.sql.DataFrame, cols: Array[String])org.apache.spark.sql.DataFrame\nencodeCol: (x: org.apache.spark.sql.DataFrame, cols: Array[String])org.apache.spark.sql.DataFrame\nimputeNumericCol: (x: org.apache.spark.sql.DataFrame, cols: Array[String])org.apache.spark.sql.DataFrame\npullFeature: (x: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\ntransformFeature: (df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\nassembleFeature: (x: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1575440342021_-337931134","id":"20191204-061902_1705190012","dateCreated":"2019-12-04T06:19:02+0000","dateStarted":"2019-12-05T20:06:56+0000","dateFinished":"2019-12-05T20:07:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64953"},{"text":"import org.apache.spark.sql.Row\nimport org.apache.spark.ml.linalg.Vector\n\nval vecToArrayUDF = udf{ x: Vector => x.toArray}\n\nval x = pullFeature(df)\nval y = transformFeature(x)\nval z = assembleFeature(y)\nval result = z.withColumn(\"featuresArray\", vecToArrayUDF(col(\"features\"))).drop(\"features\")\n","user":"anonymous","dateUpdated":"2019-12-05T20:34:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Row\nimport org.apache.spark.ml.linalg.Vector\nvecToArrayUDF: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(DoubleType,false),Some(List(org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7)))\nx: org.apache.spark.sql.DataFrame = [ATHLETE_ID: bigint, age: double ... 22 more fields]\ny: org.apache.spark.sql.DataFrame = [ATHLETE_ID: bigint, NUM_RIDES: float ... 22 more fields]\nz: org.apache.spark.sql.DataFrame = [ATHLETE_ID: bigint, features: vector]\nresult: org.apache.spark.sql.DataFrame = [ATHLETE_ID: bigint, featuresArray: array<double>]\n"}]},"apps":[],"jobName":"paragraph_1575483806134_-1971785275","id":"20191204-182326_1829896050","dateCreated":"2019-12-04T18:23:26+0000","dateStarted":"2019-12-05T20:34:49+0000","dateFinished":"2019-12-05T20:35:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64954"},{"text":"// z.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").\n// parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeature\")\n\nresult.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").\nparquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureArray\")","user":"anonymous","dateUpdated":"2019-12-05T20:38:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1575486545093_-1228587102","id":"20191204-190905_1740826640","dateCreated":"2019-12-04T19:09:05+0000","dateStarted":"2019-12-05T20:33:50+0000","dateFinished":"2019-12-05T20:34:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64955"},{"text":"import org.apache.spark.sql.{Row}\nimport org.apache.spark.ml.linalg.Vector\n\n// val testDF = spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeature\").\n// select(\"features\").map{case Row(v: Vector) => v.size}\n\n// testDF.agg(max(\"value\"), min(\"value\")).collect\n\nval testDF = spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureArray\").\nselect(\"featuresArray\").as[Array[Double]].map{_.size}\n\ntestDF.agg(max(\"value\"), min(\"value\")).collect","user":"anonymous","dateUpdated":"2019-12-05T20:45:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Row\nimport org.apache.spark.ml.linalg.Vector\ntestDF: org.apache.spark.sql.Dataset[Int] = [value: int]\nres97: Array[org.apache.spark.sql.Row] = Array([29,29])\n"}]},"apps":[],"jobName":"paragraph_1575489993544_-642854829","id":"20191204-200633_1477232785","dateCreated":"2019-12-04T20:06:33+0000","dateStarted":"2019-12-05T20:45:19+0000","dateFinished":"2019-12-05T20:45:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64956"},{"text":"// VERSION 2: play around with activites table\n\n// pull all activites for given athlete_id, partition by athlete_id and save it to S3\n\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\n\n// pull athlete ids\nspark.read.load(\"s3a://strava.scratch/gbm/bay-area/athleteRollUp\").select(\"ATHLETE_ID\").createOrReplaceTempView(\"temp\")\nval idDF = spark.sql(\"select bigint(ATHLETE_ID) from temp\")\nidDF.printSchema\n\n","user":"anonymous","dateUpdated":"2019-12-17T00:19:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\nidDF: org.apache.spark.sql.DataFrame = [ATHLETE_ID: bigint]\nroot\n |-- ATHLETE_ID: long (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1575578610307_-455916854","id":"20191205-204330_1195185003","dateCreated":"2019-12-05T20:43:30+0000","dateStarted":"2019-12-16T23:52:46+0000","dateFinished":"2019-12-16T23:52:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64957"},{"text":"\nSnowflakeQuery.write(idDF,\n            \"sandbox.route_eta_athlete_ids\",\n            SaveMode.Overwrite)\n","user":"anonymous","dateUpdated":"2019-12-17T00:20:02+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import net.snowflake.spark.snowflake.Utils.SNOWFLAKE_SOURCE_NAME\n"}]},"apps":[],"jobName":"paragraph_1576537093798_1397453843","id":"20191216-225813_1677635084","dateCreated":"2019-12-16T22:58:13+0000","dateStarted":"2019-12-16T23:52:51+0000","dateFinished":"2019-12-16T23:52:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64958"},{"text":"import com.strava.commons.spark.util.SnowflakeQuery\n\nval mySnowQuery = \"\"\"\nselect\nID as ACTIVITY_ID, TYPE,  a.ATHLETE_ID,  START_DATE, WORKOUT_TYPE,\nCOMMUTE, BIKE_WEIGHT, ATHLETE_WEIGHT,\nHAS_DISTANCE, HAS_HEARTRATE, HAS_ALTITUDE,  HAS_TEMP, HAS_CADENCE,  HAS_WATTS,\nDISTANCE, MOVING_TIME, ELAPSED_TIME, ELEV_GAIN, DISTANCE / MOVING_TIME AS SPEED1, DISTANCE / ELAPSED_TIME AS SPEED2,\nMAX_GRADE, SUFFER_SCORE, MAX_CADENCE,  AVG_WATTS, AVG_TEMP, AVG_CADENCE,\nMAX_HR, RECORDS, STRESS_SCORE, ELEV_HIGH, ELEV_LOW,  AVG_GRADE, AVG_WATTS_CALC, MAX_SPEED, AVG_HR\n\nfrom STRAVA.PUBLIC.ACTIVITIES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.HAS_DISTANCE\nand a.MOVING_TIME > 0 and a.ELAPSED_TIME > 0\nand a.ATHLETE_ID = b.ATHLETE_ID\n\"\"\"\n\nval activities = SnowflakeQuery.read(mySnowQuery)\n","user":"anonymous","dateUpdated":"2019-12-17T19:53:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.strava.commons.spark.util.SnowflakeQuery\nmySnowQuery: String =\n\"\nselect\nID as ACTIVITY_ID, TYPE,  a.ATHLETE_ID,  START_DATE, WORKOUT_TYPE,\nCOMMUTE, BIKE_WEIGHT, ATHLETE_WEIGHT,\nHAS_DISTANCE, HAS_HEARTRATE, HAS_ALTITUDE,  HAS_TEMP, HAS_CADENCE,  HAS_WATTS,\nDISTANCE, MOVING_TIME, ELAPSED_TIME, ELEV_GAIN, DISTANCE / MOVING_TIME AS SPEED1, DISTANCE / ELAPSED_TIME AS SPEED2,\nMAX_GRADE, SUFFER_SCORE, MAX_CADENCE,  AVG_WATTS, AVG_TEMP, AVG_CADENCE,\nMAX_HR, RECORDS, STRESS_SCORE, ELEV_HIGH, ELEV_LOW,  AVG_GRADE, AVG_WATTS_CALC, MAX_SPEED, AVG_HR\n\nfrom STRAVA.PUBLIC.ACTIVITIES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.HAS_DISTANCE\nand a.MOVING_TIME > 0 and a.ELAPSED_TIME > 0\nand a.ATHLETE_ID = b.ATHLETE_ID\n\"\nactivities: org.apache.spark.sql.DataFrame = [ACTIVITY_ID: decimal(38,0), TYPE: string ... 33 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576530185822_-1933661532","id":"20191216-210305_1213876039","dateCreated":"2019-12-16T21:03:05+0000","dateStarted":"2019-12-17T19:53:19+0000","dateFinished":"2019-12-17T19:53:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64959"},{"text":"activities.repartition(100, col(\"ATHLETE_ID\")).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/activitiesSample\")","user":"anonymous","dateUpdated":"2019-12-17T19:54:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1576533313174_-939826662","id":"20191216-215513_578812424","dateCreated":"2019-12-16T21:55:13+0000","dateStarted":"2019-12-17T19:54:09+0000","dateFinished":"2019-12-17T20:07:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64960"},{"text":"val myQuery = \"\"\"\nselect a.ID as athleteId,\ndatediff(month, '2019-12-01 14:39:20'::timestamp, \n                      a.DATEOFBIRTH) as age,\ndatediff(month, '2019-12-01 14:39:20'::timestamp, \n                      c.REG_DATE) as reg_age,\na.SEX,\na.WEIGHT,\niff(a.PRO=2, 1, 0) as IS_PRO,\na.AMBASSADOR,\na.MAX_HEARTRATE,\na.ATHLETE_TYPE,\nc.PRIMARY_SPORT\nfrom STRAVA.PUBLIC.ATHLETES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.ID = b.ATHLETE_ID\njoin STRAVA.PUBLIC.ATHLETE_DAILY_ROLLUP c\non a.ID = c.ATHLETE_ID\n\"\"\"\nval athleteMeta = SnowflakeQuery.read(myQuery)\nathleteMeta.printSchema\n\n\n","user":"anonymous","dateUpdated":"2019-12-17T21:07:02+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nselect a.ID as athleteId,\ndatediff(month, '2019-12-01 14:39:20'::timestamp,\n                      a.DATEOFBIRTH) as age,\ndatediff(month, '2019-12-01 14:39:20'::timestamp,\n                      c.REG_DATE) as reg_age,\na.SEX,\na.WEIGHT,\niff(a.PRO=2, 1, 0) as IS_PRO,\na.AMBASSADOR,\na.MAX_HEARTRATE,\na.ATHLETE_TYPE,\nc.PRIMARY_SPORT\nfrom STRAVA.PUBLIC.ATHLETES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.ID = b.ATHLETE_ID\njoin STRAVA.PUBLIC.ATHLETE_DAILY_ROLLUP c\non a.ID = c.ATHLETE_ID\n\"\nathleteMeta: org.apache.spark.sql.DataFrame = [ATHLETEID: decimal(38,0), AGE: decimal(9,0) ... 8 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576615662397_-1158194754","id":"20191217-204742_735405328","dateCreated":"2019-12-17T20:47:42+0000","dateStarted":"2019-12-17T21:06:08+0000","dateFinished":"2019-12-17T21:06:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64961"},{"text":"val activityDf = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/activitiesSample\")\nactivityDf.createOrReplaceTempView(\"activities\")","user":"anonymous","dateUpdated":"2019-12-17T21:40:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"activityDf: org.apache.spark.sql.DataFrame = [ACTIVITY_ID: decimal(38,0), TYPE: string ... 33 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576533334252_-741977249","id":"20191216-215534_1163700043","dateCreated":"2019-12-16T21:55:34+0000","dateStarted":"2019-12-17T21:40:08+0000","dateFinished":"2019-12-17T21:40:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64962"},{"text":"def statQuery1(datestr: String): String = {\n    val myQuery = s\"\"\"\nselect\nATHLETE_ID,\nsum(if(TYPE = 'Run' and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_run_90day,\nsum(if(TYPE = 'Run' and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_run_180day,\nsum(if(TYPE = 'Run' and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_run_365day,\nsum(if(TYPE = 'Run', 1, 0)) as num_run,\nsum(if(TYPE = 'Run', DISTANCE, 0)) as total_distance_run,\n\n\nsum(if(TYPE = 'Ride' and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_ride_90day,\nsum(if(TYPE = 'Ride' and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_ride_180day,\nsum(if(TYPE = 'Ride' and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_ride_365day,\nsum(if(TYPE = 'Ride', 1, 0)) as num_ride,\nsum(if(TYPE = 'Ride', DISTANCE, 0)) as total_distance_ride,\n\n\nsum(if(TYPE = 'Swim' and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_swim_90day,\nsum(if(TYPE = 'Swim' and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_swim_180day,\nsum(if(TYPE = 'Swim' and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_swim_365day,\nsum(if(TYPE = 'Swim', 1, 0)) as num_swim,\nsum(if(TYPE = 'Swim', DISTANCE, 0)) as total_distance_swim,\n\n\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1 and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_race_90day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1 and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_race_180day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1 and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_race_365day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1, 1, 0)) as num_race,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1, DISTANCE, 0)) as total_distance_race,\n\n\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2 and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_long_run_90day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2 and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_long_run_180day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2 and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_long_run_365day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2, 1, 0)) as num_long_run,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2, DISTANCE, 0)) as total_distance_longrun,\n\n\nsum(if(START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_total_90day,\nsum(if(START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_total_180day,\nsum(if(START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_total_365day,\ncount(1) as num_total\nfrom activities\nwhere START_DATE < '$datestr'\ngroup by ATHLETE_ID\n\"\"\"\n    myQuery\n  }\n\n  def statQuery2(datestr: String, meterUpper: Int, meterLower: Int, interval: Int): String = {\n    val myQuery = s\"\"\"\nselect\nATHLETE_ID as athleteID,\n\nmax(speed1) as max_speed1_${meterUpper}m_run_${interval}day,\nmin(speed1) as min_speed1_${meterUpper}m_run_${interval}day,\navg(speed1) as avg_speed1_${meterUpper}m_run_${interval}day,\n\nmax(speed2) as max_speed2_${meterUpper}m_run_${interval}day,\nmin(speed2) as min_speed2_${meterUpper}m_run_${interval}day,\navg(speed2) as avg_speed2_${meterUpper}m_run_${interval}day,\n\nmax(MAX_GRADE) as max_MAX_GRADE_${meterUpper}m_run_${interval}day,\nmin(MAX_GRADE) as min_MAX_GRADE_${meterUpper}m_run_${interval}day,\navg(MAX_GRADE) as avg_MAX_GRADE_${meterUpper}m_run_${interval}day,\n\n\nmax(SUFFER_SCORE) as max_SUFFER_SCORE_${meterUpper}m_run_${interval}day,\nmin(SUFFER_SCORE) as min_SUFFER_SCORE_${meterUpper}m_run_${interval}day,\navg(SUFFER_SCORE) as avg_SUFFER_SCORE_${meterUpper}m_run_${interval}day,\n\nmax(MAX_CADENCE) as max_MAX_CADENCE_${meterUpper}m_run_${interval}day,\nmin(MAX_CADENCE) as min_MAX_CADENCE_${meterUpper}m_run_${interval}day,\navg(MAX_CADENCE) as avg_MAX_CADENCE_${meterUpper}m_run_${interval}day,\n\nmax(AVG_CADENCE) as max_AVG_CADENCE_${meterUpper}m_run_${interval}day,\nmin(AVG_CADENCE) as min_AVG_CADENCE_${meterUpper}m_run_${interval}day,\navg(AVG_CADENCE) as avg_AVG_CADENCE_${meterUpper}m_run_${interval}day,\n\nmax(MAX_HR) as max_MAX_HR_${meterUpper}m_run_${interval}day,\nmin(MAX_HR) as min_MAX_HR_${meterUpper}m_run_${interval}day,\navg(MAX_HR) as avg_MAX_HR_${meterUpper}m_run_${interval}day,\n\nmax(RECORDS) as max_RECORDS_${meterUpper}m_run_${interval}day,\nmin(RECORDS) as min_RECORDS_${meterUpper}m_run_${interval}day,\navg(RECORDS) as avg_RECORDS_${meterUpper}m_run_${interval}day,\n\nmax(AVG_GRADE) as max_AVG_GRADE_${meterUpper}m_run_${interval}day,\nmin(AVG_GRADE) as min_AVG_GRADE_${meterUpper}m_run_${interval}day,\navg(AVG_GRADE) as avg_AVG_GRADE_${meterUpper}m_run_${interval}day,\n\nmax(AVG_HR) as max_AVG_HR_${meterUpper}m_run_${interval}day,\nmin(AVG_HR) as min_AVG_HR_${meterUpper}m_run_${interval}day,\navg(AVG_HR) as avg_AVG_HR_${meterUpper}m_run_${interval}day,\n\nmax(MAX_SPEED) as max_MAX_SPEED_${meterUpper}m_run_${interval}day,\nmin(MAX_SPEED) as min_MAX_SPEED_${meterUpper}m_run_${interval}day,\navg(MAX_SPEED) as avg_MAX_SPEED_${meterUpper}m_run_${interval}day\nfrom activities\nwhere START_DATE < '$datestr' and DISTANCE < $meterUpper and DISTANCE >= $meterLower and START_DATE >= date_sub('$datestr', $interval) and TYPE = 'Run'\ngroup by ATHLETE_ID\n\"\"\"\n    myQuery\n  }\n\n  def athleteFeature(datestr: String): DataFrame = {\n    // base stat\n    var df = spark.sql(statQuery1(datestr))\n\n    var preMile = 0\n    val miles = Array(5, 12, 1000)\n    val intervals = Array (90, 360)\n\n    for (mile <- miles ) {\n      val meterLower = preMile * 1600\n      val meterUpper = mile * 1600\n      for (interval <- intervals) {\n        val myQuery = statQuery2(datestr=datestr, meterLower=meterLower, meterUpper=meterUpper, interval=interval)\n        val newFeature = spark.sql(myQuery)\n        df = df.joinWith(newFeature, df(\"ATHLETE_ID\") === newFeature(\"athleteID\")).select(\"_1.*\", \"_2.*\").drop(\"athleteID\")\n        print(s\"mile{$mile} interval{$interval}\")\n\n      }\n      preMile = mile\n    }\n\n    df\n  }","user":"anonymous","dateUpdated":"2019-12-18T19:25:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"statQuery1: (datestr: String)String\nstatQuery2: (datestr: String, meterUpper: Int, meterLower: Int, interval: Int)String\n<console>:89: error: not enough arguments for method statQuery2: (datestr: String, meterUpper: Int, meterLower: Int, mile: Int, interval: Int)String.\nUnspecified value parameter mile.\n               val myQuery = statQuery2(datestr=datestr, meterLower=meterLower, meterUpper=meterUpper, interval=interval)\n                                       ^\n"}]},"apps":[],"jobName":"paragraph_1576694719906_1536350347","id":"20191218-184519_1845040986","dateCreated":"2019-12-18T18:45:19+0000","dateStarted":"2019-12-18T19:25:21+0000","dateFinished":"2019-12-18T19:25:22+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:64963"},{"text":"val df = athleteFeature(\"2019-01-01\")","user":"anonymous","dateUpdated":"2019-12-18T19:09:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"mile{5} interval{90}mile{5} interval{360}mile{12} interval{90}mile{12} interval{360}mile{1000} interval{90}mile{1000} interval{360}df: org.apache.spark.sql.DataFrame = [ATHLETE_ID: decimal(38,0), num_run_90day: bigint ... 226 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576694887755_2008257396","id":"20191218-184807_135496034","dateCreated":"2019-12-18T18:48:07+0000","dateStarted":"2019-12-18T19:09:18+0000","dateFinished":"2019-12-18T19:09:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64964"},{"text":"df.printSchema","user":"anonymous","dateUpdated":"2019-12-18T19:09:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- ATHLETE_ID: decimal(38,0) (nullable = true)\n |-- num_run_90day: long (nullable = true)\n |-- num_run_180day: long (nullable = true)\n |-- num_run_365day: long (nullable = true)\n |-- num_run: long (nullable = true)\n |-- total_distance_run: double (nullable = true)\n |-- num_ride_90day: long (nullable = true)\n |-- num_ride_180day: long (nullable = true)\n |-- num_ride_365day: long (nullable = true)\n |-- num_ride: long (nullable = true)\n |-- total_distance_ride: double (nullable = true)\n |-- num_swim_90day: long (nullable = true)\n |-- num_swim_180day: long (nullable = true)\n |-- num_swim_365day: long (nullable = true)\n |-- num_swim: long (nullable = true)\n |-- total_distance_swim: double (nullable = true)\n |-- num_race_90day: long (nullable = true)\n |-- num_race_180day: long (nullable = true)\n |-- num_race_365day: long (nullable = true)\n |-- num_race: long (nullable = true)\n |-- total_distance_race: double (nullable = true)\n |-- num_long_run_90day: long (nullable = true)\n |-- num_long_run_180day: long (nullable = true)\n |-- num_long_run_365day: long (nullable = true)\n |-- num_long_run: long (nullable = true)\n |-- total_distance_longrun: double (nullable = true)\n |-- num_total_90day: long (nullable = true)\n |-- num_total_180day: long (nullable = true)\n |-- num_total_365day: long (nullable = true)\n |-- num_total: long (nullable = false)\n |-- max_speed1_5mile_run_90day: double (nullable = true)\n |-- min_speed1_5mile_run_90day: double (nullable = true)\n |-- avg_speed1_5mile_run_90day: double (nullable = true)\n |-- max_speed2_5mile_run_90day: double (nullable = true)\n |-- min_speed2_5mile_run_90day: double (nullable = true)\n |-- avg_speed2_5mile_run_90day: double (nullable = true)\n |-- max_MAX_GRADE_5mile_run_90day: double (nullable = true)\n |-- min_MAX_GRADE_5mile_run_90day: double (nullable = true)\n |-- avg_MAX_GRADE_5mile_run_90day: double (nullable = true)\n |-- max_SUFFER_SCORE_5mile_run_90day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_5mile_run_90day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_5mile_run_90day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_5mile_run_90day: double (nullable = true)\n |-- min_MAX_CADENCE_5mile_run_90day: double (nullable = true)\n |-- avg_MAX_CADENCE_5mile_run_90day: double (nullable = true)\n |-- max_AVG_CADENCE_5mile_run_90day: double (nullable = true)\n |-- min_AVG_CADENCE_5mile_run_90day: double (nullable = true)\n |-- avg_AVG_CADENCE_5mile_run_90day: double (nullable = true)\n |-- max_MAX_HR_5mile_run_90day: double (nullable = true)\n |-- min_MAX_HR_5mile_run_90day: double (nullable = true)\n |-- avg_MAX_HR_5mile_run_90day: double (nullable = true)\n |-- max_RECORDS_5mile_run_90day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_5mile_run_90day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_5mile_run_90day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_5mile_run_90day: double (nullable = true)\n |-- min_AVG_GRADE_5mile_run_90day: double (nullable = true)\n |-- avg_AVG_GRADE_5mile_run_90day: double (nullable = true)\n |-- max_AVG_HR_5mile_run_90day: double (nullable = true)\n |-- min_AVG_HR_5mile_run_90day: double (nullable = true)\n |-- avg_AVG_HR_5mile_run_90day: double (nullable = true)\n |-- max_MAX_SPEED_5mile_run_90day: double (nullable = true)\n |-- min_MAX_SPEED_5mile_run_90day: double (nullable = true)\n |-- avg_MAX_SPEED_5mile_run_90day: double (nullable = true)\n |-- max_speed1_5mile_run_180day: double (nullable = true)\n |-- min_speed1_5mile_run_180day: double (nullable = true)\n |-- avg_speed1_5mile_run_180day: double (nullable = true)\n |-- max_speed2_5mile_run_180day: double (nullable = true)\n |-- min_speed2_5mile_run_180day: double (nullable = true)\n |-- avg_speed2_5mile_run_180day: double (nullable = true)\n |-- max_MAX_GRADE_5mile_run_180day: double (nullable = true)\n |-- min_MAX_GRADE_5mile_run_180day: double (nullable = true)\n |-- avg_MAX_GRADE_5mile_run_180day: double (nullable = true)\n |-- max_SUFFER_SCORE_5mile_run_180day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_5mile_run_180day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_5mile_run_180day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_5mile_run_180day: double (nullable = true)\n |-- min_MAX_CADENCE_5mile_run_180day: double (nullable = true)\n |-- avg_MAX_CADENCE_5mile_run_180day: double (nullable = true)\n |-- max_AVG_CADENCE_5mile_run_180day: double (nullable = true)\n |-- min_AVG_CADENCE_5mile_run_180day: double (nullable = true)\n |-- avg_AVG_CADENCE_5mile_run_180day: double (nullable = true)\n |-- max_MAX_HR_5mile_run_180day: double (nullable = true)\n |-- min_MAX_HR_5mile_run_180day: double (nullable = true)\n |-- avg_MAX_HR_5mile_run_180day: double (nullable = true)\n |-- max_RECORDS_5mile_run_180day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_5mile_run_180day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_5mile_run_180day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_5mile_run_180day: double (nullable = true)\n |-- min_AVG_GRADE_5mile_run_180day: double (nullable = true)\n |-- avg_AVG_GRADE_5mile_run_180day: double (nullable = true)\n |-- max_AVG_HR_5mile_run_180day: double (nullable = true)\n |-- min_AVG_HR_5mile_run_180day: double (nullable = true)\n |-- avg_AVG_HR_5mile_run_180day: double (nullable = true)\n |-- max_MAX_SPEED_5mile_run_180day: double (nullable = true)\n |-- min_MAX_SPEED_5mile_run_180day: double (nullable = true)\n |-- avg_MAX_SPEED_5mile_run_180day: double (nullable = true)\n |-- max_speed1_5mile_run_3600day: double (nullable = true)\n |-- min_speed1_5mile_run_3600day: double (nullable = true)\n |-- avg_speed1_5mile_run_3600day: double (nullable = true)\n |-- max_speed2_5mile_run_3600day: double (nullable = true)\n |-- min_speed2_5mile_run_3600day: double (nullable = true)\n |-- avg_speed2_5mile_run_3600day: double (nullable = true)\n |-- max_MAX_GRADE_5mile_run_3600day: double (nullable = true)\n |-- min_MAX_GRADE_5mile_run_3600day: double (nullable = true)\n |-- avg_MAX_GRADE_5mile_run_3600day: double (nullable = true)\n |-- max_SUFFER_SCORE_5mile_run_3600day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_5mile_run_3600day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_5mile_run_3600day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_5mile_run_3600day: double (nullable = true)\n |-- min_MAX_CADENCE_5mile_run_3600day: double (nullable = true)\n |-- avg_MAX_CADENCE_5mile_run_3600day: double (nullable = true)\n |-- max_AVG_CADENCE_5mile_run_3600day: double (nullable = true)\n |-- min_AVG_CADENCE_5mile_run_3600day: double (nullable = true)\n |-- avg_AVG_CADENCE_5mile_run_3600day: double (nullable = true)\n |-- max_MAX_HR_5mile_run_3600day: double (nullable = true)\n |-- min_MAX_HR_5mile_run_3600day: double (nullable = true)\n |-- avg_MAX_HR_5mile_run_3600day: double (nullable = true)\n |-- max_RECORDS_5mile_run_3600day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_5mile_run_3600day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_5mile_run_3600day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_5mile_run_3600day: double (nullable = true)\n |-- min_AVG_GRADE_5mile_run_3600day: double (nullable = true)\n |-- avg_AVG_GRADE_5mile_run_3600day: double (nullable = true)\n |-- max_AVG_HR_5mile_run_3600day: double (nullable = true)\n |-- min_AVG_HR_5mile_run_3600day: double (nullable = true)\n |-- avg_AVG_HR_5mile_run_3600day: double (nullable = true)\n |-- max_MAX_SPEED_5mile_run_3600day: double (nullable = true)\n |-- min_MAX_SPEED_5mile_run_3600day: double (nullable = true)\n |-- avg_MAX_SPEED_5mile_run_3600day: double (nullable = true)\n |-- max_speed1_12mile_run_90day: double (nullable = true)\n |-- min_speed1_12mile_run_90day: double (nullable = true)\n |-- avg_speed1_12mile_run_90day: double (nullable = true)\n |-- max_speed2_12mile_run_90day: double (nullable = true)\n |-- min_speed2_12mile_run_90day: double (nullable = true)\n |-- avg_speed2_12mile_run_90day: double (nullable = true)\n |-- max_MAX_GRADE_12mile_run_90day: double (nullable = true)\n |-- min_MAX_GRADE_12mile_run_90day: double (nullable = true)\n |-- avg_MAX_GRADE_12mile_run_90day: double (nullable = true)\n |-- max_SUFFER_SCORE_12mile_run_90day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_12mile_run_90day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_12mile_run_90day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_12mile_run_90day: double (nullable = true)\n |-- min_MAX_CADENCE_12mile_run_90day: double (nullable = true)\n |-- avg_MAX_CADENCE_12mile_run_90day: double (nullable = true)\n |-- max_AVG_CADENCE_12mile_run_90day: double (nullable = true)\n |-- min_AVG_CADENCE_12mile_run_90day: double (nullable = true)\n |-- avg_AVG_CADENCE_12mile_run_90day: double (nullable = true)\n |-- max_MAX_HR_12mile_run_90day: double (nullable = true)\n |-- min_MAX_HR_12mile_run_90day: double (nullable = true)\n |-- avg_MAX_HR_12mile_run_90day: double (nullable = true)\n |-- max_RECORDS_12mile_run_90day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_12mile_run_90day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_12mile_run_90day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_12mile_run_90day: double (nullable = true)\n |-- min_AVG_GRADE_12mile_run_90day: double (nullable = true)\n |-- avg_AVG_GRADE_12mile_run_90day: double (nullable = true)\n |-- max_AVG_HR_12mile_run_90day: double (nullable = true)\n |-- min_AVG_HR_12mile_run_90day: double (nullable = true)\n |-- avg_AVG_HR_12mile_run_90day: double (nullable = true)\n |-- max_MAX_SPEED_12mile_run_90day: double (nullable = true)\n |-- min_MAX_SPEED_12mile_run_90day: double (nullable = true)\n |-- avg_MAX_SPEED_12mile_run_90day: double (nullable = true)\n |-- max_speed1_12mile_run_180day: double (nullable = true)\n |-- min_speed1_12mile_run_180day: double (nullable = true)\n |-- avg_speed1_12mile_run_180day: double (nullable = true)\n |-- max_speed2_12mile_run_180day: double (nullable = true)\n |-- min_speed2_12mile_run_180day: double (nullable = true)\n |-- avg_speed2_12mile_run_180day: double (nullable = true)\n |-- max_MAX_GRADE_12mile_run_180day: double (nullable = true)\n |-- min_MAX_GRADE_12mile_run_180day: double (nullable = true)\n |-- avg_MAX_GRADE_12mile_run_180day: double (nullable = true)\n |-- max_SUFFER_SCORE_12mile_run_180day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_12mile_run_180day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_12mile_run_180day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_12mile_run_180day: double (nullable = true)\n |-- min_MAX_CADENCE_12mile_run_180day: double (nullable = true)\n |-- avg_MAX_CADENCE_12mile_run_180day: double (nullable = true)\n |-- max_AVG_CADENCE_12mile_run_180day: double (nullable = true)\n |-- min_AVG_CADENCE_12mile_run_180day: double (nullable = true)\n |-- avg_AVG_CADENCE_12mile_run_180day: double (nullable = true)\n |-- max_MAX_HR_12mile_run_180day: double (nullable = true)\n |-- min_MAX_HR_12mile_run_180day: double (nullable = true)\n |-- avg_MAX_HR_12mile_run_180day: double (nullable = true)\n |-- max_RECORDS_12mile_run_180day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_12mile_run_180day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_12mile_run_180day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_12mile_run_180day: double (nullable = true)\n |-- min_AVG_GRADE_12mile_run_180day: double (nullable = true)\n |-- avg_AVG_GRADE_12mile_run_180day: double (nullable = true)\n |-- max_AVG_HR_12mile_run_180day: double (nullable = true)\n |-- min_AVG_HR_12mile_run_180day: double (nullable = true)\n |-- avg_AVG_HR_12mile_run_180day: double (nullable = true)\n |-- max_MAX_SPEED_12mile_run_180day: double (nullable = true)\n |-- min_MAX_SPEED_12mile_run_180day: double (nullable = true)\n |-- avg_MAX_SPEED_12mile_run_180day: double (nullable = true)\n |-- max_speed1_12mile_run_3600day: double (nullable = true)\n |-- min_speed1_12mile_run_3600day: double (nullable = true)\n |-- avg_speed1_12mile_run_3600day: double (nullable = true)\n |-- max_speed2_12mile_run_3600day: double (nullable = true)\n |-- min_speed2_12mile_run_3600day: double (nullable = true)\n |-- avg_speed2_12mile_run_3600day: double (nullable = true)\n |-- max_MAX_GRADE_12mile_run_3600day: double (nullable = true)\n |-- min_MAX_GRADE_12mile_run_3600day: double (nullable = true)\n |-- avg_MAX_GRADE_12mile_run_3600day: double (nullable = true)\n |-- max_SUFFER_SCORE_12mile_run_3600day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_12mile_run_3600day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_12mile_run_3600day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_12mile_run_3600day: double (nullable = true)\n |-- min_MAX_CADENCE_12mile_run_3600day: double (nullable = true)\n |-- avg_MAX_CADENCE_12mile_run_3600day: double (nullable = true)\n |-- max_AVG_CADENCE_12mile_run_3600day: double (nullable = true)\n |-- min_AVG_CADENCE_12mile_run_3600day: double (nullable = true)\n |-- avg_AVG_CADENCE_12mile_run_3600day: double (nullable = true)\n |-- max_MAX_HR_12mile_run_3600day: double (nullable = true)\n |-- min_MAX_HR_12mile_run_3600day: double (nullable = true)\n |-- avg_MAX_HR_12mile_run_3600day: double (nullable = true)\n |-- max_RECORDS_12mile_run_3600day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_12mile_run_3600day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_12mile_run_3600day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_12mile_run_3600day: double (nullable = true)\n |-- min_AVG_GRADE_12mile_run_3600day: double (nullable = true)\n |-- avg_AVG_GRADE_12mile_run_3600day: double (nullable = true)\n |-- max_AVG_HR_12mile_run_3600day: double (nullable = true)\n |-- min_AVG_HR_12mile_run_3600day: double (nullable = true)\n |-- avg_AVG_HR_12mile_run_3600day: double (nullable = true)\n |-- max_MAX_SPEED_12mile_run_3600day: double (nullable = true)\n |-- min_MAX_SPEED_12mile_run_3600day: double (nullable = true)\n |-- avg_MAX_SPEED_12mile_run_3600day: double (nullable = true)\n |-- max_speed1_1000mile_run_90day: double (nullable = true)\n |-- min_speed1_1000mile_run_90day: double (nullable = true)\n |-- avg_speed1_1000mile_run_90day: double (nullable = true)\n |-- max_speed2_1000mile_run_90day: double (nullable = true)\n |-- min_speed2_1000mile_run_90day: double (nullable = true)\n |-- avg_speed2_1000mile_run_90day: double (nullable = true)\n |-- max_MAX_GRADE_1000mile_run_90day: double (nullable = true)\n |-- min_MAX_GRADE_1000mile_run_90day: double (nullable = true)\n |-- avg_MAX_GRADE_1000mile_run_90day: double (nullable = true)\n |-- max_SUFFER_SCORE_1000mile_run_90day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_1000mile_run_90day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_1000mile_run_90day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_1000mile_run_90day: double (nullable = true)\n |-- min_MAX_CADENCE_1000mile_run_90day: double (nullable = true)\n |-- avg_MAX_CADENCE_1000mile_run_90day: double (nullable = true)\n |-- max_AVG_CADENCE_1000mile_run_90day: double (nullable = true)\n |-- min_AVG_CADENCE_1000mile_run_90day: double (nullable = true)\n |-- avg_AVG_CADENCE_1000mile_run_90day: double (nullable = true)\n |-- max_MAX_HR_1000mile_run_90day: double (nullable = true)\n |-- min_MAX_HR_1000mile_run_90day: double (nullable = true)\n |-- avg_MAX_HR_1000mile_run_90day: double (nullable = true)\n |-- max_RECORDS_1000mile_run_90day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_1000mile_run_90day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_1000mile_run_90day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_1000mile_run_90day: double (nullable = true)\n |-- min_AVG_GRADE_1000mile_run_90day: double (nullable = true)\n |-- avg_AVG_GRADE_1000mile_run_90day: double (nullable = true)\n |-- max_AVG_HR_1000mile_run_90day: double (nullable = true)\n |-- min_AVG_HR_1000mile_run_90day: double (nullable = true)\n |-- avg_AVG_HR_1000mile_run_90day: double (nullable = true)\n |-- max_MAX_SPEED_1000mile_run_90day: double (nullable = true)\n |-- min_MAX_SPEED_1000mile_run_90day: double (nullable = true)\n |-- avg_MAX_SPEED_1000mile_run_90day: double (nullable = true)\n |-- max_speed1_1000mile_run_180day: double (nullable = true)\n |-- min_speed1_1000mile_run_180day: double (nullable = true)\n |-- avg_speed1_1000mile_run_180day: double (nullable = true)\n |-- max_speed2_1000mile_run_180day: double (nullable = true)\n |-- min_speed2_1000mile_run_180day: double (nullable = true)\n |-- avg_speed2_1000mile_run_180day: double (nullable = true)\n |-- max_MAX_GRADE_1000mile_run_180day: double (nullable = true)\n |-- min_MAX_GRADE_1000mile_run_180day: double (nullable = true)\n |-- avg_MAX_GRADE_1000mile_run_180day: double (nullable = true)\n |-- max_SUFFER_SCORE_1000mile_run_180day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_1000mile_run_180day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_1000mile_run_180day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_1000mile_run_180day: double (nullable = true)\n |-- min_MAX_CADENCE_1000mile_run_180day: double (nullable = true)\n |-- avg_MAX_CADENCE_1000mile_run_180day: double (nullable = true)\n |-- max_AVG_CADENCE_1000mile_run_180day: double (nullable = true)\n |-- min_AVG_CADENCE_1000mile_run_180day: double (nullable = true)\n |-- avg_AVG_CADENCE_1000mile_run_180day: double (nullable = true)\n |-- max_MAX_HR_1000mile_run_180day: double (nullable = true)\n |-- min_MAX_HR_1000mile_run_180day: double (nullable = true)\n |-- avg_MAX_HR_1000mile_run_180day: double (nullable = true)\n |-- max_RECORDS_1000mile_run_180day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_1000mile_run_180day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_1000mile_run_180day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_1000mile_run_180day: double (nullable = true)\n |-- min_AVG_GRADE_1000mile_run_180day: double (nullable = true)\n |-- avg_AVG_GRADE_1000mile_run_180day: double (nullable = true)\n |-- max_AVG_HR_1000mile_run_180day: double (nullable = true)\n |-- min_AVG_HR_1000mile_run_180day: double (nullable = true)\n |-- avg_AVG_HR_1000mile_run_180day: double (nullable = true)\n |-- max_MAX_SPEED_1000mile_run_180day: double (nullable = true)\n |-- min_MAX_SPEED_1000mile_run_180day: double (nullable = true)\n |-- avg_MAX_SPEED_1000mile_run_180day: double (nullable = true)\n |-- max_speed1_1000mile_run_3600day: double (nullable = true)\n |-- min_speed1_1000mile_run_3600day: double (nullable = true)\n |-- avg_speed1_1000mile_run_3600day: double (nullable = true)\n |-- max_speed2_1000mile_run_3600day: double (nullable = true)\n |-- min_speed2_1000mile_run_3600day: double (nullable = true)\n |-- avg_speed2_1000mile_run_3600day: double (nullable = true)\n |-- max_MAX_GRADE_1000mile_run_3600day: double (nullable = true)\n |-- min_MAX_GRADE_1000mile_run_3600day: double (nullable = true)\n |-- avg_MAX_GRADE_1000mile_run_3600day: double (nullable = true)\n |-- max_SUFFER_SCORE_1000mile_run_3600day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_1000mile_run_3600day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_1000mile_run_3600day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_1000mile_run_3600day: double (nullable = true)\n |-- min_MAX_CADENCE_1000mile_run_3600day: double (nullable = true)\n |-- avg_MAX_CADENCE_1000mile_run_3600day: double (nullable = true)\n |-- max_AVG_CADENCE_1000mile_run_3600day: double (nullable = true)\n |-- min_AVG_CADENCE_1000mile_run_3600day: double (nullable = true)\n |-- avg_AVG_CADENCE_1000mile_run_3600day: double (nullable = true)\n |-- max_MAX_HR_1000mile_run_3600day: double (nullable = true)\n |-- min_MAX_HR_1000mile_run_3600day: double (nullable = true)\n |-- avg_MAX_HR_1000mile_run_3600day: double (nullable = true)\n |-- max_RECORDS_1000mile_run_3600day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_1000mile_run_3600day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_1000mile_run_3600day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_1000mile_run_3600day: double (nullable = true)\n |-- min_AVG_GRADE_1000mile_run_3600day: double (nullable = true)\n |-- avg_AVG_GRADE_1000mile_run_3600day: double (nullable = true)\n |-- max_AVG_HR_1000mile_run_3600day: double (nullable = true)\n |-- min_AVG_HR_1000mile_run_3600day: double (nullable = true)\n |-- avg_AVG_HR_1000mile_run_3600day: double (nullable = true)\n |-- max_MAX_SPEED_1000mile_run_3600day: double (nullable = true)\n |-- min_MAX_SPEED_1000mile_run_3600day: double (nullable = true)\n |-- avg_MAX_SPEED_1000mile_run_3600day: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1576695448355_-471018226","id":"20191218-185728_1112326169","dateCreated":"2019-12-18T18:57:28+0000","dateStarted":"2019-12-18T19:09:26+0000","dateFinished":"2019-12-18T19:09:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64965"},{"text":"df.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1\")","user":"anonymous","dateUpdated":"2019-12-18T18:23:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1576691810538_-1551188081","id":"20191218-175650_2129949247","dateCreated":"2019-12-18T17:56:50+0000","dateStarted":"2019-12-18T18:23:33+0000","dateFinished":"2019-12-18T18:25:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64966"},{"text":"spark.sql(\"select double(SUFFER_SCORE) from activities limit 10\").printSchema","user":"anonymous","dateUpdated":"2019-12-18T19:08:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- SUFFER_SCORE: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1576693684383_2108626229","id":"20191218-182804_962799277","dateCreated":"2019-12-18T18:28:04+0000","dateStarted":"2019-12-18T19:08:47+0000","dateFinished":"2019-12-18T19:08:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64967"},{"text":" spark.sql(statQuery2(datestr=\"2019-01-01\", meterLower=100, meterUpper=10000, interval=90)).printSchema","user":"anonymous","dateUpdated":"2019-12-18T19:26:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- athleteID: decimal(38,0) (nullable = true)\n |-- max_speed1_10000m_run_90day: double (nullable = true)\n |-- min_speed1_10000m_run_90day: double (nullable = true)\n |-- avg_speed1_10000m_run_90day: double (nullable = true)\n |-- max_speed2_10000m_run_90day: double (nullable = true)\n |-- min_speed2_10000m_run_90day: double (nullable = true)\n |-- avg_speed2_10000m_run_90day: double (nullable = true)\n |-- max_MAX_GRADE_10000m_run_90day: double (nullable = true)\n |-- min_MAX_GRADE_10000m_run_90day: double (nullable = true)\n |-- avg_MAX_GRADE_10000m_run_90day: double (nullable = true)\n |-- max_SUFFER_SCORE_10000m_run_90day: decimal(38,0) (nullable = true)\n |-- min_SUFFER_SCORE_10000m_run_90day: decimal(38,0) (nullable = true)\n |-- avg_SUFFER_SCORE_10000m_run_90day: decimal(38,4) (nullable = true)\n |-- max_MAX_CADENCE_10000m_run_90day: double (nullable = true)\n |-- min_MAX_CADENCE_10000m_run_90day: double (nullable = true)\n |-- avg_MAX_CADENCE_10000m_run_90day: double (nullable = true)\n |-- max_AVG_CADENCE_10000m_run_90day: double (nullable = true)\n |-- min_AVG_CADENCE_10000m_run_90day: double (nullable = true)\n |-- avg_AVG_CADENCE_10000m_run_90day: double (nullable = true)\n |-- max_MAX_HR_10000m_run_90day: double (nullable = true)\n |-- min_MAX_HR_10000m_run_90day: double (nullable = true)\n |-- avg_MAX_HR_10000m_run_90day: double (nullable = true)\n |-- max_RECORDS_10000m_run_90day: decimal(38,0) (nullable = true)\n |-- min_RECORDS_10000m_run_90day: decimal(38,0) (nullable = true)\n |-- avg_RECORDS_10000m_run_90day: decimal(38,4) (nullable = true)\n |-- max_AVG_GRADE_10000m_run_90day: double (nullable = true)\n |-- min_AVG_GRADE_10000m_run_90day: double (nullable = true)\n |-- avg_AVG_GRADE_10000m_run_90day: double (nullable = true)\n |-- max_AVG_HR_10000m_run_90day: double (nullable = true)\n |-- min_AVG_HR_10000m_run_90day: double (nullable = true)\n |-- avg_AVG_HR_10000m_run_90day: double (nullable = true)\n |-- max_MAX_SPEED_10000m_run_90day: double (nullable = true)\n |-- min_MAX_SPEED_10000m_run_90day: double (nullable = true)\n |-- avg_MAX_SPEED_10000m_run_90day: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1576696100884_1393168872","id":"20191218-190820_516065095","dateCreated":"2019-12-18T19:08:20+0000","dateStarted":"2019-12-18T19:26:39+0000","dateFinished":"2019-12-18T19:26:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64968"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576696893271_-1452087962","id":"20191218-192133_1062275036","dateCreated":"2019-12-18T19:21:33+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:64969"}],"name":"/lucindaz/AthleteFeatureV0","id":"2EV851SZT","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}