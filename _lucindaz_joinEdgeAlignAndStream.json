{"paragraphs":[{"text":"\nimport com.strava.commons.util.geo.GeoHash\nimport com.strava.commons.util.geo.Geometry\nimport com.strava.commons.thrift.Point\nimport com.strava.hetchy.schemas.activitystreamset.StreamTypes\n\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions.{broadcast, col}","user":"anonymous","dateUpdated":"2020-01-09T18:53:16+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.strava.commons.util.geo.GeoHash\nimport com.strava.commons.util.geo.Geometry\nimport com.strava.commons.thrift.Point\nimport com.strava.hetchy.schemas.activitystreamset.StreamTypes\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions.{broadcast, col}\n"}]},"apps":[],"jobName":"paragraph_1574712941878_-2131401941","id":"20191125-201541_1488915145","dateCreated":"2019-11-25T20:15:41+0000","dateStarted":"2019-12-02T18:14:52+0000","dateFinished":"2019-12-02T18:14:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:144223"},{"text":"\ncase class LatLng(\n                     lat: Double,\n                     lng: Double\n                   )\n\n  case class SimpleStream(\n                             time: Option[Array[Double]],\n                             latlng: Option[Array[LatLng]],\n                             elevation: Option[Array[Double]],\n                             cadence: Option[Array[Double]],\n                             heartrate: Option[Array[Double]],\n                             power: Option[Array[Double]]\n                           )\n  case class EdgeStat(\n                       activityId: Long,\n                       athleteId: Long,\n                       edgeUID: Long,\n                       streamStartPointer: Double,\n                       streamEndPointer: Double,\n                       meanDistance: Double,\n                       elapsedTime: Double,\n                       meanSpeed: Double,\n                       coverage: Double,\n                       startDateLocal: Double\n                     )\n\n  case class JoinedStream(\n                           activityId: Long,\n                           athleteId: Long,\n                           edgeUID: Long,\n                           activityType: String,\n                           streamStartPointer: Double,\n                           streamEndPointer: Double,\n                           meanDistance: Double,\n                           elapsedTime: Double,\n                           meanSpeed: Double,\n                           coverage: Double,\n                           startDateLocal: Double,\n                           time: Option[Array[Double]],\n                           latlng: Option[Array[LatLng]],\n                           elevation: Option[Array[Double]],\n                           cadence: Option[Array[Double]],\n                           heartrate: Option[Array[Double]],\n                           power: Option[Array[Double]]\n                         )\n  case class FinalStream(\n                           activityId: Long,\n                           athleteId: Long,\n                           edgeUID: Long,\n                           activityType: String,\n                           streamStartPointer: Double,\n                           streamEndPointer: Double,\n                           meanDistance: Double,\n                           distance: Double,\n                           elapsedTime: Double,\n                           meanSpeed: Double,\n                           coverage: Double,\n                           startDateLocal: Double,\n                           time: Option[Array[Double]],\n                           latlng: Option[Array[LatLng]],\n                           speed: Option[Array[Double]],\n                           elevation: Option[Array[Double]],\n                           cadence: Option[Array[Double]],\n                           heartrate: Option[Array[Double]],\n                           power: Option[Array[Double]]\n                         )","user":"anonymous","dateUpdated":"2020-01-09T18:54:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class LatLng\ndefined class SimpleStream\ndefined class EdgeStat\ndefined class JoinedStream\ndefined class FinalStream\n"}]},"apps":[],"jobName":"paragraph_1574712828015_-1210040040","id":"20191120-191348_1752848390","dateCreated":"2019-11-25T20:13:48+0000","dateStarted":"2019-11-26T20:59:19+0000","dateFinished":"2019-11-26T20:59:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144224"},{"text":"def validDoubleArray(x: Option[Array[Double]]): Boolean = {\n    // no negative value and not always 0\n    x.isDefined && x.get.max > 1e-4 && x.get.min >= 0\n  }\n\n  def validLatLngArray(x: Option[Array[LatLng]]): Boolean = {\n    val maxV = x.get.foldLeft((0.0, 0.0))((B, A) => (B._1 max A.lat, B._2 max A.lng))\n    val minV = x.get.foldLeft((0.0, 0.0))((B, A) => (B._1 min A.lat, B._2 min A.lng))\n    x.isDefined &&\n      maxV._1 < 90 && maxV._2 < 180 &&\n      minV._1 > -90 && minV._2 > -180\n  }\n\n  def speedAndDistanceFromLocation(x: Array[LatLng], t: Array[Double]): (Array[Double], Double) = {\n    val result = Array.fill(t.size - 1)(0.0)\n    val distance = 0.0\n    Range(0, t.size - 1).foreach {\n      idx =>\n        val s = Geometry.distance(Point(x(idx).lat, x(idx).lng), Point(x(idx + 1).lat, x(idx + 1).lng))\n        distance += s\n        result(idx) = s / (t(idx + 1) - t(idx))\n    }\n    (result, distance)\n  }\n\n\n  def sliceStream(x: JoinedStream): FinalStream = {\n      val start = x.streamStartPointer.toInt\n      val end = x.streamEndPointer.toInt + 1\n      if (start < 0 || start >= end || x.time.get.length < end + 1\n        || !validDoubleArray(x.time) || !validLatLngArray(x.latlng)) {\n        None.orNull\n      } else {\n        val time = Option(x.time.get.slice(start, end))\n        val elevation = if (validDoubleArray(x.elevation)) {\n          Option(x.elevation.get.slice(start, end))\n        } else None\n        val cadence = if (validDoubleArray(x.cadence)) {\n          Option(x.cadence.get.slice(start, end))\n        } else None\n        val hr = if (validDoubleArray(x.heartrate)) {\n          Option(x.heartrate.get.slice(start, end))\n        } else None\n        val power = if (validDoubleArray(x.power)) {\n          Option(x.power.get.slice(start, end))\n        } else None\n\n        // val ll = Option(x.latlng.get.slice(start, end))\n        val speedAndDistance = speedAndDistanceFromLocation(x.latlng.get.slice(start, end + 1), x.time.get.slice(start, end + 1))\n\n        // this is obviously not desired...\n        new FinalStream(\n          x.activityId,\n          x.athleteId,\n          x.edgeUID,\n          x.activityType,\n          x.streamStartPointer,\n          x.streamEndPointer,\n          x.meanDistance,\n          speedAndDistance._2\n          x.elapsedTime,\n          x.meanSpeed,\n          x.coverage,\n          x.startDateLocal,\n          time,\n          None,\n          Option(speedAndDistance._1),\n          elevation,\n          cadence,\n          hr,\n          power\n        )\n      }\n  }\n\n  def sliceStreamSparkWrapper(x: JoinedStream): FinalStream = try {\n    sliceStream(x)\n  } catch {\n    // log: exceptions in slicing streams\n    case e: Exception => None.orNull\n  }\n\ndef simpleDecode(xs: DataFrame): DataFrame = {\n\tvar res = xs\n\tval cols = xs.schema.fieldNames.toSet\n\tStreamTypes.streams.filter{s => cols contains s.packedCol}.foreach{ s =>\n\t  res = res.withColumn(s.unpackedCol, s.get(col(s.packedCol))).drop(col(s.packedCol))\n\t}\n\tres\n}\n","user":"anonymous","dateUpdated":"2020-01-09T18:53:58+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"validDoubleArray: (x: Option[Array[Double]])Boolean\nvalidLatLngArray: (x: Option[Array[LatLng]])Boolean\nspeedFromLocation: (x: Array[LatLng], t: Array[Double])Array[Double]\nsliceStream: (x: JoinedStream)FinalStream\nsliceStreamSparkWrapper: (x: JoinedStream)FinalStream\nsimpleDecode: (xs: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1574712828018_-1563466454","id":"20191122-175533_1884219224","dateCreated":"2019-11-25T20:13:48+0000","dateStarted":"2019-11-26T20:59:23+0000","dateFinished":"2019-11-26T20:59:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144225"},{"text":" // Run unit test here!!\n // test whole logic on a single activity + multiple edges\n val key = 1820\n   val alignDf = spark.read.parquet(s\"s3a://strava.gbm/builds/190902/alignment/key=$key\").filter(col(\"activityId\").equalTo(1820730385))\n\n  alignDf.createOrReplaceTempView(\"subAlign\")\n  val streamDf = simpleDecode(\n      spark.read.parquet(s\"s3a://strava.hetchy/streams/activity_streams_raw/version_d16f4c7434524d6abaaad6c6a38bd12b/key=$key\").filter(col(\"id\").equalTo(1820730385))\n      )\n  streamDf.createOrReplaceTempView(\"subStream\")\nval query = \"\"\"\nselect activityId, athleteId, edgeUID, activityType, streamStartPointer, streamEndPointer, meanDistance, elapsedTime, meanSpeed, coverage,  startDateLocal,\ntime, latlng, elevation, cadence, heartrate, power\nfrom subAlign join subStream\non subAlign.activityId = subStream.attributes.id\nand activityType in ('Run', 'Ride')\nand meanDistance < 100\nand meanDistance is not null\nand elapsedTime > 1 and elapsedTime < 500\nand elapsedTime is not null\nand meanSpeed > 0.1 and meanSpeed < 13\nand meanSpeed is not null\nand coverage > 0.9 and coverage <=1\nand coverage is not null\n\"\"\"\n  val joinedSet =  spark.sql(query).as[JoinedStream]\n  val finalSet = joinedSet.map(sliceStreamSparkWrapper).filter(Option(_).isDefined).as[FinalStream]\n\n","user":"anonymous","dateUpdated":"2020-01-09T17:45:09+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"key: Int = 1820\nalignDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [edgeID: bigint, edgeUID: bigint ... 23 more fields]\nstreamDf: org.apache.spark.sql.DataFrame = [id: bigint, attributes: struct<id: bigint, athleteId: int ... 12 more fields> ... 7 more fields]\nquery: String =\n\"\nselect activityId, athleteId, edgeUID, activityType, streamStartPointer, streamEndPointer, meanDistance, elapsedTime, meanSpeed, coverage,  startDateLocal,\ntime, latlng, elevation, cadence, heartrate, power\nfrom subAlign join subStream\non subAlign.activityId = subStream.attributes.id\nand activityType in ('Run', 'Ride')\nand meanDistance > 1 and meanDistance < 100\nand meanDistance is not null\nand elapsedTime > 1 and elapsedTime < 500\nand elapsedTime is not null\nand meanSpeed > 0.3 and meanSpeed < 13\nand meanSpeed is not null\nand coverage > 0.9 and coverage <=1\nand coverage is not null\n\"\njoinedSet: org.apache.spark.sql.Dataset[JoinedStream] = [activityId: bigint, athleteId: bigint ... 15 more fields]\nfinalSet: org.apache.spark.sql.Dataset[FinalStream] = [activityId: bigint, athleteId: bigint ... 16 more fields]\n"}]},"apps":[],"jobName":"paragraph_1574712828020_504781206","id":"20191122-175836_613159383","dateCreated":"2019-11-25T20:13:48+0000","dateStarted":"2019-11-25T20:39:05+0000","dateFinished":"2019-11-25T20:39:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144226"},{"text":"\nval inputData = joinedSet.collect()\nval outputData = finalSet.collect()","user":"anonymous","dateUpdated":"2019-11-25T20:39:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"inputData: Array[JoinedStream] = Array(JoinedStream(1820730385,23193068,-261021848,Run,752.0805302077256,754.5513743088403,18.152092628775552,20.605692393466597,2.415399655695577,1.0,1.536124893E9,Some([D@4d560ae7),Some([LLatLng;@22e2e78b),Some([D@5af54f89),Some([D@23ce35f6),Some([D@5eb2025a),None), JoinedStream(1820730385,23193068,-261021818,Run,764.1108364082605,766.9850550211268,14.22055620027433,22.993748902929838,2.645578942069868,1.0,1.536124893E9,Some([D@6bd968b8),Some([LLatLng;@1ba0fb4d),Some([D@49931c4a),Some([D@7fd67f0),Some([D@2741431f),None), JoinedStream(1820730385,23193068,-261026031,Run,704.2894735859594,707.7958038467034,10.871097963235524,45.47304928076301,1.2718039300079047,1.0,1.536124893E9,Some([D@3b27be29),Some([LLatLng;@6a87944b),Some([D@629bc0c),Some([D@2bdd5e6d),...outputData: Array[FinalStream] = Array(FinalStream(1820730385,23193068,261021448,Run,870.6475420987036,881.836951457266,31.062293112997665,43.810359065905686,2.5969029899229463,1.0,1.536124893E9,Some([D@743ae08b),None,Some([D@21ddd967),Some([D@1edc0747),Some([D@7d763546),Some([D@5e6bbcdb),None), FinalStream(1820730385,23193068,-261026552,Run,190.869153902526,192.53855920170744,29.12149283423722,13.486088490925567,2.6156276554017044,1.0,1.536124893E9,Some([D@11324090),None,Some([D@6faa9bce),Some([D@23ba4f78),Some([D@2034b2b0),Some([D@238150e6),None), FinalStream(1820730385,23193068,-261021774,Run,951.0,958.3828702711853,23.260556158261647,48.82870271185311,2.5952335549299224,1.0,1.536124893E9,Some([D@18cecbb3),None,Some([D@697e865d),Some([D@6cda18f0),Some([D@45f573ed),Some([D@2b08bbb3),N..."}]},"apps":[],"jobName":"paragraph_1574712828023_-128631733","id":"20191122-181555_116439360","dateCreated":"2019-11-25T20:13:48+0000","dateStarted":"2019-11-25T20:39:15+0000","dateFinished":"2019-11-25T20:40:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144227"},{"text":"outputData(139).heartrate.get\noutputData(139).speed.get\noutputData(139).elevation.get\noutputData(139).cadence.get\noutputData(139).streamStartPointer\noutputData.size\ninputData.size\n","user":"anonymous","dateUpdated":"2019-11-25T20:44:01+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res104: Array[Double] = Array(126.0, 127.0, 131.0, 134.0, 134.0, 131.0)\nres105: Array[Double] = Array(2.6902138817096466, 2.768347533533393, 2.7796898742377856, 2.6114515347419607, 2.7228389898852927, 2.6720125414546247)\nres106: Array[Double] = Array(233.4, 233.4, 233.4, 233.4, 233.4, 233.20000000000002)\nres107: Array[Double] = Array(81.0, 81.0, 80.0, 81.0, 81.0, 81.0)\nres108: Double = 728.1598044971726\nres109: Int = 233\nres110: Int = 233\n"}]},"apps":[],"jobName":"paragraph_1574712828040_-697720964","id":"20191123-034857_1006000602","dateCreated":"2019-11-25T20:13:48+0000","dateStarted":"2019-11-25T20:44:01+0000","dateFinished":"2019-11-25T20:44:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144228"},{"text":"// pre-filter stream by activiytId\n// recommended!\n\nimport com.strava.commons.util.geo.GeoHash\nimport com.strava.commons.util.geo.Geometry\nimport com.strava.commons.thrift.Point\nimport org.apache.spark.sql.functions.broadcast\n\n  val edges = spark.read.parquet(\"s3a://strava.gbm/builds/190902/edges\").select(\"id\", \"sourceHash\").as[(Long, Long)].filter{x => \n     Geometry.distance(GeoHash.decode(x._2), Point(37.771, -122.452)) < 50000\n }\n val edgeIds = broadcast(edges.map(_._1).cache())\n \n val edgeIdsInt = edgeIds.map(_.toInt).cache()\n\n\n\nRange(2060, 2800).foreach{\n\n    key =>\n    {\n     print(s\"processing key=$key \\n\")\n     val alignment = spark.read.parquet(s\"s3a://strava.gbm/builds/190902/alignment/key=$key\").\n  select(\"activityId\", \"athleteId\", \"edgeUID\", \"activityType\", \"streamStartPointer\", \"streamEndPointer\", \"meanDistance\", \"elapsedTime\", \"meanSpeed\", \"coverage\", \"startDateLocal\", \"edgeID\")\n  val alignDf = alignment.joinWith(edgeIds, alignment(\"edgeID\") === edgeIds(\"value\")).select(\"_1.*\").drop(\"edgeID\")\n  \n  alignDf.createOrReplaceTempView(\"subAlign\")\n     \n      val myQuery = \"\"\"\nselect distinct activityId\nfrom subAlign\nwhere activityType in ('Run', 'Ride')\nand meanDistance > 1 and meanDistance < 100\nand meanDistance is not null\nand elapsedTime > 1 and elapsedTime < 500\nand elapsedTime is not null\nand meanSpeed > 0.3 and meanSpeed < 13\nand meanSpeed is not null\nand coverage > 0.9 and coverage <=1\nand coverage is not null\n\"\"\"\n      \n      val streamIds = broadcast(spark.sql(myQuery).as[Long].cache())\n      val rawDf = spark.read.parquet(\n        s\"s3a://strava.hetchy/streams/activity_streams_raw/version_d16f4c7434524d6abaaad6c6a38bd12b/key=$key\")\n      val filteredRawDf = rawDf.joinWith(\n        streamIds, rawDf(\"attributes.id\") === streamIds(\"activityId\")).select(\"_1.*\")\n      \n      val streamDf = simpleDecode(filteredRawDf)\n      streamDf.createOrReplaceTempView(\"subStream\")\n      val query = \"\"\"\nselect activityId, athleteId, edgeUID, activityType, streamStartPointer, streamEndPointer, meanDistance, elapsedTime, meanSpeed, coverage,  startDateLocal,\ntime, latlng, elevation, cadence, heartrate, power\nfrom subAlign join subStream\non subAlign.activityId = subStream.attributes.id\nand activityType in ('Run', 'Ride')\nand meanDistance > 1 and meanDistance < 100\nand meanDistance is not null\nand elapsedTime > 1 and elapsedTime < 500\nand elapsedTime is not null\nand meanSpeed > 0.3 and meanSpeed < 13\nand meanSpeed is not null\nand coverage > 0.9 and coverage <=1\nand coverage is not null\n\"\"\"\n      val joinedSet =  spark.sql(query).as[JoinedStream]\n      val finalSet = joinedSet.map(sliceStreamSparkWrapper).filter(Option(_).isDefined).as[FinalStream]\n\n      // ~ 100M, repartition to 1\n      finalSet.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/perEdgeTraversalStream/key=$key\")\n    }\n  }","user":"anonymous","dateUpdated":"2020-01-02T18:39:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"processing key=2060 \nprocessing key=2061 \nprocessing key=2062 \nprocessing key=2063 \nprocessing key=2064 \nprocessing key=2065 \nprocessing key=2066 \nprocessing key=2067 \nprocessing key=2068 \nprocessing key=2069 \nprocessing key=2070 \nprocessing key=2071 \nprocessing key=2072 \nprocessing key=2073 \nprocessing key=2074 \nprocessing key=2075 \nprocessing key=2076 \nprocessing key=2077 \nprocessing key=2078 \nprocessing key=2079 \nprocessing key=2080 \nprocessing key=2081 \nprocessing key=2082 \nprocessing key=2083 \nprocessing key=2084 \nprocessing key=2085 \nprocessing key=2086 \nprocessing key=2087 \nprocessing key=2088 \nprocessing key=2089 \nprocessing key=2090 \nprocessing key=2091 \nprocessing key=2092 \nprocessing key=2093 \nprocessing key=2094 \nprocessing key=2095 \nprocessing key=2096 \nprocessing key=2097 \nprocessing key=2098 \nprocessing key=2099 \nprocessing key=2100 \nprocessing key=2101 \nprocessing key=2102 \nprocessing key=2103 \nprocessing key=2104 \nprocessing key=2105 \nprocessing key=2106 \nprocessing key=2107 \nprocessing key=2108 \nprocessing key=2109 \nprocessing key=2110 \nprocessing key=2111 \nprocessing key=2112 \nprocessing key=2113 \nprocessing key=2114 \nprocessing key=2115 \nprocessing key=2116 \nprocessing key=2117 \nprocessing key=2118 \nprocessing key=2119 \nprocessing key=2120 \nprocessing key=2121 \nprocessing key=2122 \nprocessing key=2123 \nprocessing key=2124 \nprocessing key=2125 \nprocessing key=2126 \nprocessing key=2127 \nprocessing key=2128 \nprocessing key=2129 \nprocessing key=2130 \nprocessing key=2131 \nprocessing key=2132 \nprocessing key=2133 \nprocessing key=2134 \nprocessing key=2135 \nprocessing key=2136 \nprocessing key=2137 \nprocessing key=2138 \nprocessing key=2139 \nprocessing key=2140 \nprocessing key=2141 \nprocessing key=2142 \nprocessing key=2143 \nprocessing key=2144 \nprocessing key=2145 \nprocessing key=2146 \nprocessing key=2147 \nprocessing key=2148 \nprocessing key=2149 \nprocessing key=2150 \nprocessing key=2151 \nprocessing key=2152 \nprocessing key=2153 \nprocessing key=2154 \nprocessing key=2155 \nprocessing key=2156 \nprocessing key=2157 \nprocessing key=2158 \nprocessing key=2159 \nprocessing key=2160 \nprocessing key=2161 \nprocessing key=2162 \nprocessing key=2163 \nprocessing key=2164 \nprocessing key=2165 \nprocessing key=2166 \nprocessing key=2167 \nprocessing key=2168 \nprocessing key=2169 \nprocessing key=2170 \nprocessing key=2171 \nprocessing key=2172 \nprocessing key=2173 \nprocessing key=2174 \nprocessing key=2175 \nprocessing key=2176 \nprocessing key=2177 \nprocessing key=2178 \nprocessing key=2179 \nprocessing key=2180 \nprocessing key=2181 \nprocessing key=2182 \nprocessing key=2183 \nprocessing key=2184 \nprocessing key=2185 \nprocessing key=2186 \nprocessing key=2187 \nprocessing key=2188 \nprocessing key=2189 \nprocessing key=2190 \nprocessing key=2191 \nprocessing key=2192 \nprocessing key=2193 \nprocessing key=2194 \nprocessing key=2195 \nprocessing key=2196 \nprocessing key=2197 \nprocessing key=2198 \nprocessing key=2199 \nprocessing key=2200 \nprocessing key=2201 \nprocessing key=2202 \nprocessing key=2203 \nprocessing key=2204 \nprocessing key=2205 \nprocessing key=2206 \nprocessing key=2207 \nprocessing key=2208 \nprocessing key=2209 \nprocessing key=2210 \nprocessing key=2211 \nprocessing key=2212 \nprocessing key=2213 \nprocessing key=2214 \nprocessing key=2215 \nprocessing key=2216 \nprocessing key=2217 \nprocessing key=2218 \nprocessing key=2219 \nprocessing key=2220 \nprocessing key=2221 \nprocessing key=2222 \nprocessing key=2223 \nprocessing key=2224 \nprocessing key=2225 \nprocessing key=2226 \nprocessing key=2227 \nprocessing key=2228 \nprocessing key=2229 \nprocessing key=2230 \nprocessing key=2231 \nprocessing key=2232 \nprocessing key=2233 \nprocessing key=2234 \nprocessing key=2235 \nprocessing key=2236 \nprocessing key=2237 \nprocessing key=2238 \nprocessing key=2239 \nprocessing key=2240 \nprocessing key=2241 \nprocessing key=2242 \nprocessing key=2243 \nprocessing key=2244 \nprocessing key=2245 \nprocessing key=2246 \nprocessing key=2247 \nprocessing key=2248 \nprocessing key=2249 \nprocessing key=2250 \nprocessing key=2251 \nprocessing key=2252 \nprocessing key=2253 \nprocessing key=2254 \nprocessing key=2255 \nprocessing key=2256 \nprocessing key=2257 \nprocessing key=2258 \nprocessing key=2259 \nprocessing key=2260 \nprocessing key=2261 \nprocessing key=2262 \nprocessing key=2263 \nprocessing key=2264 \nprocessing key=2265 \nprocessing key=2266 \nprocessing key=2267 \nprocessing key=2268 \nprocessing key=2269 \nprocessing key=2270 \nprocessing key=2271 \nprocessing key=2272 \nprocessing key=2273 \nprocessing key=2274 \nprocessing key=2275 \nprocessing key=2276 \nprocessing key=2277 \nprocessing key=2278 \nprocessing key=2279 \nprocessing key=2280 \nprocessing key=2281 \nprocessing key=2282 \nprocessing key=2283 \nprocessing key=2284 \nprocessing key=2285 \nprocessing key=2286 \nprocessing key=2287 \nprocessing key=2288 \nprocessing key=2289 \nprocessing key=2290 \nprocessing key=2291 \nprocessing key=2292 \nprocessing key=2293 \nprocessing key=2294 \nprocessing key=2295 \nprocessing key=2296 \nprocessing key=2297 \nprocessing key=2298 \nprocessing key=2299 \nprocessing key=2300 \nprocessing key=2301 \nprocessing key=2302 \nprocessing key=2303 \nprocessing key=2304 \nprocessing key=2305 \nprocessing key=2306 \nprocessing key=2307 \nprocessing key=2308 \nprocessing key=2309 \nprocessing key=2310 \nprocessing key=2311 \nprocessing key=2312 \nprocessing key=2313 \nprocessing key=2314 \nprocessing key=2315 \nprocessing key=2316 \nprocessing key=2317 \nprocessing key=2318 \nprocessing key=2319 \nprocessing key=2320 \nprocessing key=2321 \nprocessing key=2322 \nprocessing key=2323 \nprocessing key=2324 \nprocessing key=2325 \nprocessing key=2326 \nprocessing key=2327 \nprocessing key=2328 \nprocessing key=2329 \nprocessing key=2330 \nprocessing key=2331 \nprocessing key=2332 \nprocessing key=2333 \nprocessing key=2334 \nprocessing key=2335 \nprocessing key=2336 \nprocessing key=2337 \nprocessing key=2338 \nprocessing key=2339 \nprocessing key=2340 \nprocessing key=2341 \nprocessing key=2342 \nprocessing key=2343 \nprocessing key=2344 \nprocessing key=2345 \nprocessing key=2346 \nprocessing key=2347 \nprocessing key=2348 \nprocessing key=2349 \nprocessing key=2350 \nprocessing key=2351 \nprocessing key=2352 \nprocessing key=2353 \nprocessing key=2354 \nprocessing key=2355 \nprocessing key=2356 \nprocessing key=2357 \nprocessing key=2358 \nprocessing key=2359 \nprocessing key=2360 \nprocessing key=2361 \nprocessing key=2362 \nprocessing key=2363 \nprocessing key=2364 \nprocessing key=2365 \nprocessing key=2366 \nprocessing key=2367 \nprocessing key=2368 \nprocessing key=2369 \nprocessing key=2370 \nprocessing key=2371 \nprocessing key=2372 \nprocessing key=2373 \nprocessing key=2374 \nprocessing key=2375 \nprocessing key=2376 \nprocessing key=2377 \nprocessing key=2378 \nprocessing key=2379 \nprocessing key=2380 \nprocessing key=2381 \nprocessing key=2382 \nprocessing key=2383 \nprocessing key=2384 \nprocessing key=2385 \nprocessing key=2386 \nprocessing key=2387 \nprocessing key=2388 \nprocessing key=2389 \nprocessing key=2390 \nprocessing key=2391 \nprocessing key=2392 \nprocessing key=2393 \nprocessing key=2394 \nprocessing key=2395 \nprocessing key=2396 \nprocessing key=2397 \nprocessing key=2398 \nprocessing key=2399 \nprocessing key=2400 \nprocessing key=2401 \nprocessing key=2402 \nprocessing key=2403 \nprocessing key=2404 \nprocessing key=2405 \nprocessing key=2406 \nprocessing key=2407 \nprocessing key=2408 \nprocessing key=2409 \nprocessing key=2410 \nprocessing key=2411 \nprocessing key=2412 \nprocessing key=2413 \nprocessing key=2414 \nprocessing key=2415 \nprocessing key=2416 \nprocessing key=2417 \nprocessing key=2418 \nprocessing key=2419 \nprocessing key=2420 \nprocessing key=2421 \nprocessing key=2422 \nprocessing key=2423 \nprocessing key=2424 \nprocessing key=2425 \nprocessing key=2426 \nprocessing key=2427 \nprocessing key=2428 \nprocessing key=2429 \nprocessing key=2430 \nprocessing key=2431 \nprocessing key=2432 \nprocessing key=2433 \nprocessing key=2434 \nprocessing key=2435 \nprocessing key=2436 \nprocessing key=2437 \nprocessing key=2438 \nprocessing key=2439 \nprocessing key=2440 \nprocessing key=2441 \nprocessing key=2442 \nprocessing key=2443 \nprocessing key=2444 \nprocessing key=2445 \nprocessing key=2446 \nprocessing key=2447 \nprocessing key=2448 \nprocessing key=2449 \nprocessing key=2450 \nprocessing key=2451 \nprocessing key=2452 \nprocessing key=2453 \nprocessing key=2454 \nprocessing key=2455 \nprocessing key=2456 \nprocessing key=2457 \nprocessing key=2458 \nprocessing key=2459 \nprocessing key=2460 \nprocessing key=2461 \nprocessing key=2462 \nprocessing key=2463 \nprocessing key=2464 \nprocessing key=2465 \nprocessing key=2466 \nprocessing key=2467 \nprocessing key=2468 \nprocessing key=2469 \nprocessing key=2470 \nprocessing key=2471 \nprocessing key=2472 \nprocessing key=2473 \nprocessing key=2474 \nprocessing key=2475 \nprocessing key=2476 \nprocessing key=2477 \nprocessing key=2478 \nprocessing key=2479 \nprocessing key=2480 \nprocessing key=2481 \nprocessing key=2482 \nprocessing key=2483 \nprocessing key=2484 \nprocessing key=2485 \nprocessing key=2486 \nprocessing key=2487 \nprocessing key=2488 \nprocessing key=2489 \nprocessing key=2490 \nprocessing key=2491 \nprocessing key=2492 \nprocessing key=2493 \nprocessing key=2494 \nprocessing key=2495 \nprocessing key=2496 \nprocessing key=2497 \nprocessing key=2498 \nprocessing key=2499 \nprocessing key=2500 \nprocessing key=2501 \nprocessing key=2502 \nprocessing key=2503 \nprocessing key=2504 \nprocessing key=2505 \nprocessing key=2506 \nprocessing key=2507 \nprocessing key=2508 \nprocessing key=2509 \nprocessing key=2510 \nprocessing key=2511 \nprocessing key=2512 \nprocessing key=2513 \nprocessing key=2514 \nprocessing key=2515 \nprocessing key=2516 \nprocessing key=2517 \nprocessing key=2518 \nprocessing key=2519 \nprocessing key=2520 \nprocessing key=2521 \nprocessing key=2522 \nprocessing key=2523 \nprocessing key=2524 \nprocessing key=2525 \nprocessing key=2526 \nprocessing key=2527 \nprocessing key=2528 \nprocessing key=2529 \nprocessing key=2530 \nprocessing key=2531 \nprocessing key=2532 \nprocessing key=2533 \nprocessing key=2534 \nprocessing key=2535 \nprocessing key=2536 \nprocessing key=2537 \nprocessing key=2538 \nprocessing key=2539 \nprocessing key=2540 \nprocessing key=2541 \nprocessing key=2542 \nprocessing key=2543 \nprocessing key=2544 \nprocessing key=2545 \nprocessing key=2546 \nprocessing key=2547 \nprocessing key=2548 \nprocessing key=2549 \nprocessing key=2550 \nprocessing key=2551 \nprocessing key=2552 \nprocessing key=2553 \nprocessing key=2554 \nprocessing key=2555 \nprocessing key=2556 \nprocessing key=2557 \nprocessing key=2558 \nprocessing key=2559 \nprocessing key=2560 \nprocessing key=2561 \nprocessing key=2562 \nprocessing key=2563 \nprocessing key=2564 \nprocessing key=2565 \nprocessing key=2566 \nprocessing key=2567 \nprocessing key=2568 \nprocessing key=2569 \nprocessing key=2570 \nprocessing key=2571 \nprocessing key=2572 \nprocessing key=2573 \nprocessing key=2574 \nprocessing key=2575 \nprocessing key=2576 \nprocessing key=2577 \nprocessing key=2578 \nprocessing key=2579 \nprocessing key=2580 \nprocessing key=2581 \nprocessing key=2582 \nprocessing key=2583 \nprocessing key=2584 \nprocessing key=2585 \nprocessing key=2586 \nprocessing key=2587 \nprocessing key=2588 \nprocessing key=2589 \nprocessing key=2590 \nprocessing key=2591 \nprocessing key=2592 \nprocessing key=2593 \nprocessing key=2594 \nprocessing key=2595 \nprocessing key=2596 \nprocessing key=2597 \nprocessing key=2598 \nprocessing key=2599 \nprocessing key=2600 \nprocessing key=2601 \nprocessing key=2602 \nprocessing key=2603 \nprocessing key=2604 \nprocessing key=2605 \nprocessing key=2606 \nprocessing key=2607 \nprocessing key=2608 \nprocessing key=2609 \nprocessing key=2610 \nprocessing key=2611 \nprocessing key=2612 \nprocessing key=2613 \nprocessing key=2614 \nprocessing key=2615 \nprocessing key=2616 \nprocessing key=2617 \nprocessing key=2618 \nprocessing key=2619 \nprocessing key=2620 \nprocessing key=2621 \nprocessing key=2622 \nprocessing key=2623 \nprocessing key=2624 \nprocessing key=2625 \nprocessing key=2626 \nprocessing key=2627 \nprocessing key=2628 \nprocessing key=2629 \nprocessing key=2630 \nprocessing key=2631 \nprocessing key=2632 \nprocessing key=2633 \nprocessing key=2634 \nprocessing key=2635 \nprocessing key=2636 \nprocessing key=2637 \nprocessing key=2638 \nprocessing key=2639 \nprocessing key=2640 \nprocessing key=2641 \nprocessing key=2642 \nprocessing key=2643 \nprocessing key=2644 \nprocessing key=2645 \nprocessing key=2646 \nprocessing key=2647 \nprocessing key=2648 \nprocessing key=2649 \nprocessing key=2650 \nprocessing key=2651 \nprocessing key=2652 \nprocessing key=2653 \nprocessing key=2654 \nprocessing key=2655 \nprocessing key=2656 \nprocessing key=2657 \nprocessing key=2658 \nprocessing key=2659 \nprocessing key=2660 \nprocessing key=2661 \nprocessing key=2662 \nprocessing key=2663 \nprocessing key=2664 \nprocessing key=2665 \nprocessing key=2666 \nprocessing key=2667 \nprocessing key=2668 \nprocessing key=2669 \nprocessing key=2670 \nprocessing key=2671 \nprocessing key=2672 \nprocessing key=2673 \nprocessing key=2674 \nprocessing key=2675 \nprocessing key=2676 \nprocessing key=2677 \nprocessing key=2678 \nprocessing key=2679 \nprocessing key=2680 \nprocessing key=2681 \nprocessing key=2682 \nprocessing key=2683 \nprocessing key=2684 \nprocessing key=2685 \nprocessing key=2686 \nprocessing key=2687 \nprocessing key=2688 \nprocessing key=2689 \nprocessing key=2690 \nprocessing key=2691 \nprocessing key=2692 \nprocessing key=2693 \nprocessing key=2694 \nprocessing key=2695 \nprocessing key=2696 \nprocessing key=2697 \nprocessing key=2698 \nprocessing key=2699 \nprocessing key=2700 \nprocessing key=2701 \nprocessing key=2702 \nprocessing key=2703 \nprocessing key=2704 \nprocessing key=2705 \nprocessing key=2706 \nprocessing key=2707 \nprocessing key=2708 \nprocessing key=2709 \nprocessing key=2710 \nprocessing key=2711 \nprocessing key=2712 \nprocessing key=2713 \nprocessing key=2714 \nprocessing key=2715 \nprocessing key=2716 \nprocessing key=2717 \nprocessing key=2718 \nprocessing key=2719 \nprocessing key=2720 \nprocessing key=2721 \nprocessing key=2722 \nprocessing key=2723 \nprocessing key=2724 \nprocessing key=2725 \nprocessing key=2726 \nprocessing key=2727 \nprocessing key=2728 \nprocessing key=2729 \nprocessing key=2730 \nprocessing key=2731 \nprocessing key=2732 \nprocessing key=2733 \nprocessing key=2734 \nprocessing key=2735 \nprocessing key=2736 \nprocessing key=2737 \nprocessing key=2738 \nprocessing key=2739 \nprocessing key=2740 \nprocessing key=2741 \nprocessing key=2742 \nprocessing key=2743 \nprocessing key=2744 \nprocessing key=2745 \nprocessing key=2746 \nprocessing key=2747 \nprocessing key=2748 \nprocessing key=2749 \nprocessing key=2750 \nprocessing key=2751 \nprocessing key=2752 \nprocessing key=2753 \nprocessing key=2754 \nprocessing key=2755 \nprocessing key=2756 \nprocessing key=2757 \nprocessing key=2758 \nprocessing key=2759 \nprocessing key=2760 \nprocessing key=2761 \nprocessing key=2762 \nprocessing key=2763 \nprocessing key=2764 \nprocessing key=2765 \nprocessing key=2766 \nprocessing key=2767 \nprocessing key=2768 \nprocessing key=2769 \nprocessing key=2770 \nprocessing key=2771 \nprocessing key=2772 \nprocessing key=2773 \nprocessing key=2774 \nprocessing key=2775 \nprocessing key=2776 \nprocessing key=2777 \nprocessing key=2778 \nprocessing key=2779 \nprocessing key=2780 \nprocessing key=2781 \nprocessing key=2782 \nprocessing key=2783 \nprocessing key=2784 \nprocessing key=2785 \nprocessing key=2786 \nprocessing key=2787 \nprocessing key=2788 \nprocessing key=2789 \nprocessing key=2790 \nprocessing key=2791 \nprocessing key=2792 \nprocessing key=2793 \nprocessing key=2794 \nprocessing key=2795 \nprocessing key=2796 \nprocessing key=2797 \nprocessing key=2798 \nprocessing key=2799 \n"}]},"apps":[],"jobName":"paragraph_1574807610763_1326387013","id":"20191126-223330_1172355886","dateCreated":"2019-11-26T22:33:30+0000","dateStarted":"2019-11-26T22:55:56+0000","dateFinished":"2019-11-28T01:12:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144229"},{"text":"val testData = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/perEdgeTraversalStream/key=1890\").as[JoinedStream]\ntestData.printSchema\ntestData.count\ntestData.show()\n\n// xx(2).activityId\n// xx(2).time.get\n// xx(2).elevation.get\n// xx(2).heartrate.get","user":"anonymous","dateUpdated":"2020-01-02T18:39:48+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"testData: org.apache.spark.sql.Dataset[JoinedStream] = [activityId: bigint, athleteId: bigint ... 16 more fields]\nroot\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- edgeUID: long (nullable = true)\n |-- activityType: string (nullable = true)\n |-- streamStartPointer: double (nullable = true)\n |-- streamEndPointer: double (nullable = true)\n |-- meanDistance: double (nullable = true)\n |-- elapsedTime: double (nullable = true)\n |-- meanSpeed: double (nullable = true)\n |-- coverage: double (nullable = true)\n |-- startDateLocal: double (nullable = true)\n |-- time: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- latlng: array (nullable = true)\n |    |-- element: struct (containsNull = true)\n |    |    |-- lat: double (nullable = true)\n |    |    |-- lng: double (nullable = true)\n |-- speed: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- elevation: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- cadence: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- heartrate: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- power: array (nullable = true)\n |    |-- element: double (containsNull = true)\n\nres114: Long = 1145830\n+----------+---------+----------+------------+------------------+------------------+------------------+------------------+------------------+--------+--------------+--------------------+------+--------------------+--------------------+-------+---------+-----+\n|activityId|athleteId|   edgeUID|activityType|streamStartPointer|  streamEndPointer|      meanDistance|       elapsedTime|         meanSpeed|coverage|startDateLocal|                time|latlng|               speed|           elevation|cadence|heartrate|power|\n+----------+---------+----------+------------+------------------+------------------+------------------+------------------+------------------+--------+--------------+--------------------+------+--------------------+--------------------+-------+---------+-----+\n|1890111661| 17121730|-211925227|        Ride|1236.7859289862229|1252.2942799293987|15.096653293909991|21.274030519568214| 4.454874493998896|     1.0| 1.538894191E9|[1479.0, 1480.0, ...|  null|[4.56839283028178...|[103.2, 103.2, 10...|   null|     null| null|\n|1890111661| 17121730| 211925619|        Ride|            1319.0|1386.9855867399017|10.061388804952237| 70.98558673990169| 5.722931068731896|     1.0| 1.538894191E9|[1610.0, 1611.0, ...|  null|[4.72204606778917...|[101.800000000000...|   null|     null| null|\n|1890111661| 17121730|-211933114|        Ride| 678.6318069053533| 806.6745392699764|3.2273910987793575|132.71727163459957| 6.586042336859449|     1.0| 1.538894191E9|[882.0, 883.0, 88...|  null|[7.28470648220994...|[105.0, 105.0, 10...|   null|     null| null|\n|1890111661| 17121730| 211925570|        Ride|1386.9856080013644|1412.6671786086147|7.9346774977120464| 25.68157060725025| 5.292384686070415|     1.0| 1.538894191E9|[1680.0, 1681.0, ...|  null|[5.31620251900428...|[102.100000000000...|   null|     null| null|\n|1890111661| 17121730| 211932797|        Ride|               0.0| 9.139583857767695|12.155048389387982|28.139583857767697|1.4774831651258296|     1.0| 1.538894191E9|[0.0, 17.0, 19.0,...|  null|[0.18263746459887...|[105.0, 104.9, 10...|   null|     null| null|\n|1890111661| 17121730|-211932684|        Ride|1115.7204225036603|1119.3330233923446|10.483476358703358| 8.945624281028813|1.6435430114739984|     1.0| 1.538894191E9|[1349.0, 1350.0, ...|  null|[3.48420715273886...|[103.0, 103.0, 10...|   null|     null| null|\n|1890111661| 17121730| 211925425|        Ride|            1280.0|  1309.38854677811| 4.019626622134258| 66.38854677810991| 1.807155720626424|     1.0| 1.538894191E9|[1534.0, 1535.0, ...|  null|[3.00672097984177...|[102.0, 102.0, 10...|   null|     null| null|\n|1890111661| 17121730|-211933735|        Ride|454.19413832628743|498.10389979254046|6.1725369207909395| 44.90976146625303|  5.71510974230176|     1.0| 1.538894191E9|[481.0, 482.0, 48...|  null|[4.57141629966566...|[108.0, 107.9, 10...|   null|     null| null|\n|1890111661| 17121730| 211932808|        Ride| 9.139585031848922|15.615438356821597| 3.643357633202565| 6.475853324972675| 4.944893539651756|     1.0| 1.538894191E9|[28.0, 29.0, 30.0...|  null|[5.10052555482814...|[105.0, 105.0, 10...|   null|     null| null|\n|1890111661| 17121730|-211941439|        Ride|            1105.0|1115.7204206245556| 8.594855880764163|12.720420624555572| 3.280829108319119|     1.0| 1.538894191E9|[1337.0, 1338.0, ...|  null|[3.89468142761034...|[102.9, 103.0, 10...|   null|     null| null|\n|1890111661| 17121730| 211933114|        Ride| 177.4777511502096| 316.9296213873477| 9.342998644626489| 139.4518702371381| 6.251649320833318|     1.0| 1.538894191E9|[200.0, 201.0, 20...|  null|[3.03272369187264...|[106.0, 105.9, 10...|   null|     null| null|\n|1890111661| 17121730| 211931870|        Ride| 605.2269194262252| 609.3825998427897| 2.121710538408218| 4.155680416564451| 7.730290267118177|     1.0| 1.538894191E9|[809.0, 810.0, 81...|  null|[7.19843396927116...|[108.0, 107.7, 10...|   null|     null| null|\n|1890111661| 17121730| 211925577|        Ride|1412.6671798268037|1416.6273051511635| 8.896615267271072| 3.960125324359751|   5.0734480072539|     1.0| 1.538894191E9|[1706.0, 1707.0, ...|  null|[4.01845483709039...|[103.0, 103.0, 10...|   null|     null| null|\n|1890111661| 17121730|-211925266|        Ride|1195.7625478103744|1236.7859277403104|  4.07488638759879| 41.02337992993603| 5.398081031872247|     1.0| 1.538894191E9|[1438.0, 1439.0, ...|  null|[5.45077915080861...|[102.7, 102.80000...|   null|     null| null|\n|1890111661| 17121730| 211933078|        Ride|112.43405615882047| 175.1999873868633| 6.357776522214764| 64.96591861490617|  5.40379751728148|     1.0| 1.538894191E9|[131.0, 132.0, 13...|  null|[4.38628547196221...|[105.0, 105.0, 10...|   null|     null| null|\n|1890111661| 17121730|-211932683|        Ride|1119.3330229377443|1129.4657684132633|  2.93587742857422|13.799722537774642|3.3053952669632287|     1.0| 1.538894191E9|[1358.0, 1360.0, ...|  null|[2.62062859681297...|[103.0, 103.0, 10...|   null|     null| null|\n|1890111661| 17121730| 211932760|        Ride|             109.0|112.43405600661765| 8.335788538443008| 3.434056006617652| 4.370692220151265|     1.0| 1.538894191E9|[128.0, 129.0, 13...|  null|[3.97354487157021...|[103.800000000000...|   null|     null| null|\n|1890111661| 17121730|-211933078|        Ride| 809.5589791500693| 869.3679893850697| 3.269035149266258|59.809010235000414| 5.921568540710265|     1.0| 1.538894191E9|[1018.0, 1019.0, ...|  null|[4.93116477283733...|[105.9, 105.80000...|   null|     null| null|\n|1890111661| 17121730| 211925422|        Ride|  1309.38854363956|1313.2133207423947| 8.597449879456077|3.8247771028345596| 3.831155843598796|     1.0| 1.538894191E9|[1600.0, 1601.0, ...|  null|[4.28362305714034...|[102.0, 102.0, 10...|   null|     null| null|\n|1890111661| 17121730| 211933128|        Ride| 609.3826000668739| 613.6165274578777|1.2557657175192953| 4.233927391003817| 9.367468270118252|     1.0| 1.538894191E9|[813.0, 814.0, 81...|  null|[8.71284420390808...|[106.2, 106.0, 10...|   null|     null| null|\n+----------+---------+----------+------------+------------------+------------------+------------------+------------------+------------------+--------+--------------+--------------------+------+--------------------+--------------------+-------+---------+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1574712828055_-2026340729","id":"20191123-054519_111076761","dateCreated":"2019-11-25T20:13:48+0000","dateStarted":"2019-11-25T21:00:05+0000","dateFinished":"2019-11-25T21:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144230"},{"text":"spark.read.parquet(s\"s3a://strava.gbm/builds/190902/alignment/key=1890\").printSchema\n","user":"anonymous","dateUpdated":"2020-01-07T19:07:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- edgeID: long (nullable = true)\n |-- edgeUID: long (nullable = true)\n |-- streamStartPointer: double (nullable = true)\n |-- streamEndPointer: double (nullable = true)\n |-- matchBeginPortion: double (nullable = true)\n |-- matchEndPortion: double (nullable = true)\n |-- connectedBefore: boolean (nullable = true)\n |-- connectedAfter: boolean (nullable = true)\n |-- meanDistance: double (nullable = true)\n |-- elapsedTime: double (nullable = true)\n |-- meanSpeed: double (nullable = true)\n |-- coverage: double (nullable = true)\n |-- key: integer (nullable = true)\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- activityType: string (nullable = true)\n |-- startDate: double (nullable = true)\n |-- startDateLocal: double (nullable = true)\n |-- deviceType: integer (nullable = true)\n |-- _latlng: binary (nullable = true)\n |-- _time: binary (nullable = true)\n |-- _elevation: binary (nullable = true)\n |-- _offsets: binary (nullable = true)\n |-- prevEdgeUID: long (nullable = true)\n |-- nextEdgeUID: long (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1574712828060_1633058143","id":"20191125-174628_562233880","dateCreated":"2019-11-25T20:13:48+0000","dateStarted":"2020-01-07T19:07:24+0000","dateFinished":"2020-01-07T19:07:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:144231"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578424044633_-78666985","id":"20200107-190724_1867856610","dateCreated":"2020-01-07T19:07:24+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:144232"}],"name":"/lucindaz/joinEdgeAlignAndStream","id":"2EUF2E77F","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}