{"paragraphs":[{"text":"import org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.sql.functions.{abs, col}\nimport org.apache.spark.sql.SaveMode\nimport spark.implicits._\n","user":"anonymous","dateUpdated":"2020-01-12T03:59:51+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.{Pipeline, PipelineModel}\nimport org.apache.spark.sql.functions.{abs, col}\nimport org.apache.spark.sql.SaveMode\nimport spark.implicits._\n"}]},"apps":[],"jobName":"paragraph_1578506007428_-227439903","id":"20200106-182031_739474902","dateCreated":"2020-01-08T17:53:27+0000","dateStarted":"2020-01-12T03:59:51+0000","dateFinished":"2020-01-12T03:59:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:119057"},{"text":"val activityDf = spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/edgesPerActivityTest\").filter(\"activityType == 'Run'\")\nactivityDf.printSchema\n\nval athlete = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/featureVector\")\nathlete.printSchema","user":"anonymous","dateUpdated":"2020-01-12T03:59:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"activityDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [activityId: bigint, athleteId: bigint ... 10 more fields]\nroot\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- activityType: string (nullable = true)\n |-- startDateLocal: double (nullable = true)\n |-- edgeList: array (nullable = true)\n |    |-- element: long (containsNull = true)\n |-- durationList: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- distanceList: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- coverageList: array (nullable = true)\n |    |-- element: double (containsNull = true)\n |-- elapsedTimeSum: double (nullable = true)\n |-- elapsedTime: integer (nullable = true)\n |-- movingTime: integer (nullable = true)\n |-- key: integer (nullable = true)\n\nathlete: org.apache.spark.sql.DataFrame = [ATHLETE_ID: decimal(38,0), features: vector ... 1 more field]\nroot\n |-- ATHLETE_ID: decimal(38,0) (nullable = true)\n |-- features: vector (nullable = true)\n |-- datestr: date (nullable = true)\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=11100","true/jobs/job?id=11100","true/jobs/job?id=11100","true/jobs/job?id=11100","true/jobs/job?id=11100","true/jobs/job?id=11100","true/jobs/job?id=11100","true/jobs/job?id=11102","true/jobs/job?id=11102","true/jobs/job?id=11102","true/jobs/job?id=11102","true/jobs/job?id=11102","true/jobs/job?id=11102","true/jobs/job?id=11102","true/jobs/job?id=11103","true/jobs/job?id=11103","true/jobs/job?id=11103","true/jobs/job?id=11103","true/jobs/job?id=11103","true/jobs/job?id=11103","true/jobs/job?id=11103"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578506007438_-344845623","id":"20200106-194155_398311135","dateCreated":"2020-01-08T17:53:27+0000","dateStarted":"2020-01-12T03:59:59+0000","dateFinished":"2020-01-12T04:00:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119058"},{"text":"\nactivityDf.createOrReplaceTempView(\"activity\")\nathlete.createOrReplaceTempView(\"athletes\")\n","user":"anonymous","dateUpdated":"2020-01-12T04:00:02+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578506007442_1264356482","id":"20200106-210655_800743212","dateCreated":"2020-01-08T17:53:27+0000","dateStarted":"2020-01-12T04:00:02+0000","dateFinished":"2020-01-12T04:00:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119059"},{"text":"val routeETA = spark.read.parquet(\"s3a://strava.scratch/gbm/bay-area/routeResult/version0.0\")\nrouteETA.printSchema\nrouteETA.createOrReplaceTempView(\"routeResult\")","user":"anonymous","dateUpdated":"2020-01-10T19:09:35+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"routeETA: org.apache.spark.sql.DataFrame = [activityId: bigint, isBestEffort: double ... 9 more fields]\nroot\n |-- activityId: long (nullable = true)\n |-- isBestEffort: double (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- routeEstimation: double (nullable = true)\n |-- numEdgeSummed: long (nullable = true)\n |-- distance: double (nullable = true)\n |-- numEdge: integer (nullable = true)\n |-- elapsedTimeSum: double (nullable = true)\n |-- elapsedTime: integer (nullable = true)\n |-- movingTime: integer (nullable = true)\n |-- truth: double (nullable = true)\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3752","true/jobs/job?id=3752","true/jobs/job?id=3752","true/jobs/job?id=3752"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578506007468_-310135927","id":"20200106-224509_491774466","dateCreated":"2020-01-08T17:53:27+0000","dateStarted":"2020-01-10T19:09:35+0000","dateFinished":"2020-01-10T19:09:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119060"},{"text":"val myQuery = \"\"\"\nwith x as (\nselect activityId, athleteId, truth, routeEstimation as lowerBound, numEdge, distance from routeResult\nwhere numEdgeSummed = numEdge\nand elapsedTimeSum / elapsedTime < 1.05\nand abs(elapsedTime - movingTime) / movingTime < 0.2\nand distance/truth > 0.6 and distance/truth < 10\nand isBestEffort > 0.5\n),\ny as (\nselect activityId, routeEstimation as upperBound from routeResult\nwhere numEdgeSummed = numEdge\nand elapsedTimeSum / elapsedTime < 1.05\nand abs(elapsedTime - movingTime) / movingTime < 0.2\nand distance/truth > 0.6 and distance/truth < 10\nand isBestEffort < 0.5\n)\n\n\nselect x.activityId, x.athleteId, x.lowerBound, y.upperBound, x.numEdge, x.distance, x.distance/x.lowerBound as avgSpeed1,\n x.distance/y.upperBound as avgSpeed2,\nx.distance/x.numEdge as avgEdgeLength, x.distance As routeDistance, x.numEdge as numEdges, x.truth\nfrom x join y on x.activityId = y.activityId\n\n\"\"\"\nval df = spark.sql(myQuery)\ndf.printSchema","user":"anonymous","dateUpdated":"2020-01-10T19:11:04+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nwith x as (\nselect activityId, athleteId, truth, routeEstimation as lowerBound, numEdge, distance from routeResult\nwhere numEdgeSummed = numEdge\nand elapsedTimeSum / elapsedTime < 1.05\nand abs(elapsedTime - movingTime) / movingTime < 0.2\nand distance/truth > 0.6 and distance/truth < 10\nand isBestEffort > 0.5\n),\ny as (\nselect activityId, routeEstimation as upperBound from routeResult\nwhere numEdgeSummed = numEdge\nand elapsedTimeSum / elapsedTime < 1.05\nand abs(elapsedTime - movingTime) / movingTime < 0.2\nand distance/truth > 0.6 and distance/truth < 10\nand isBestEffort < 0.5\n)\n\n\nselect x.activityId, x.athleteId, x.lowerBound, y.upperBound, x.numEdge, x.distance, x.distance/x.lowerBound as avgSpeed1,\n x.distance/y.upperBound as avgSpeed2,\nx.distance/x.numEdge as avgEdg...df: org.apache.spark.sql.DataFrame = [activityId: bigint, athleteId: bigint ... 10 more fields]\nroot\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- lowerBound: double (nullable = true)\n |-- upperBound: double (nullable = true)\n |-- numEdge: integer (nullable = true)\n |-- distance: double (nullable = true)\n |-- avgSpeed1: double (nullable = true)\n |-- avgSpeed2: double (nullable = true)\n |-- avgEdgeLength: double (nullable = true)\n |-- routeDistance: double (nullable = true)\n |-- numEdges: integer (nullable = true)\n |-- truth: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1578506007504_-864002496","id":"20200107-175235_526823377","dateCreated":"2020-01-08T17:53:27+0000","dateStarted":"2020-01-10T19:11:04+0000","dateFinished":"2020-01-10T19:11:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119061"},{"text":"// assemble vectors\nimport org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.ml.linalg.{DenseVector, Vector, Vectors}\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{DecimalType, DoubleType, IntegerType, LongType}\n  def assembleFeature(x: DataFrame, featureCols: Array[String]): DataFrame = {\n    val assembler = new VectorAssembler()\n      .setInputCols(featureCols)\n      .setOutputCol(\"features\")\n\n    val output = assembler.transform(x)\n    output.drop(featureCols: _*)\n  }\n \n \nval df1 = assembleFeature(df, Array(\"lowerBound\", \"upperBound\", \"numEdge\", \"distance\", \"avgSpeed1\", \"avgSpeed2\", \"avgEdgeLength\"))\n","user":"anonymous","dateUpdated":"2020-01-10T19:11:12+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.ml.linalg.{DenseVector, Vector, Vectors}\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{DecimalType, DoubleType, IntegerType, LongType}\nassembleFeature: (x: org.apache.spark.sql.DataFrame, featureCols: Array[String])org.apache.spark.sql.DataFrame\ndf1: org.apache.spark.sql.DataFrame = [activityId: bigint, athleteId: bigint ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578518559813_-1848790079","id":"20200108-212239_1186100048","dateCreated":"2020-01-08T21:22:39+0000","dateStarted":"2020-01-10T19:11:12+0000","dateFinished":"2020-01-10T19:11:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119062"},{"text":"df1.printSchema","user":"anonymous","dateUpdated":"2020-01-10T19:11:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- routeDistance: double (nullable = true)\n |-- numEdges: integer (nullable = true)\n |-- truth: double (nullable = true)\n |-- features: vector (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1578683477698_-350864490","id":"20200110-191117_344763316","dateCreated":"2020-01-10T19:11:17+0000","dateStarted":"2020-01-10T19:11:21+0000","dateFinished":"2020-01-10T19:11:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119063"},{"text":"val Array(train, validation) = df1.randomSplit(Array(0.7, 0.3), seed=1234)","user":"anonymous","dateUpdated":"2020-01-10T19:11:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"train: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [activityId: bigint, athleteId: bigint ... 4 more fields]\nvalidation: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [activityId: bigint, athleteId: bigint ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578519341595_-2087461320","id":"20200108-213541_532675927","dateCreated":"2020-01-08T21:35:41+0000","dateStarted":"2020-01-10T19:11:28+0000","dateFinished":"2020-01-10T19:11:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119064"},{"text":"train.\nrepartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").\nparquet(s\"s3a://strava.scratch/gbm/bay-area/routeEtaTrainData/v0.1\")","user":"anonymous","dateUpdated":"2020-01-10T19:11:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3753","true/jobs/job?id=3753","true/jobs/job?id=3753","true/jobs/job?id=3753"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578518956372_177703832","id":"20200108-212916_1882737406","dateCreated":"2020-01-08T21:29:16+0000","dateStarted":"2020-01-10T19:11:33+0000","dateFinished":"2020-01-10T19:11:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119065"},{"text":"validation.\nrepartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").\nparquet(s\"s3a://strava.scratch/gbm/bay-area/routeEtaValidationData/v0.1\")","user":"anonymous","dateUpdated":"2020-01-10T19:11:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3754","true/jobs/job?id=3754","true/jobs/job?id=3754","true/jobs/job?id=3754"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578519685316_1018221330","id":"20200108-214125_161799219","dateCreated":"2020-01-08T21:41:25+0000","dateStarted":"2020-01-10T19:11:37+0000","dateFinished":"2020-01-10T19:11:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119066"},{"text":"val train = spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/routeEtaTrainData/v0.1\")\nval validation = spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/routeEtaValidationData/v0.1\")\n","user":"anonymous","dateUpdated":"2020-01-10T19:11:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"train: org.apache.spark.sql.DataFrame = [activityId: bigint, athleteId: bigint ... 4 more fields]\nvalidation: org.apache.spark.sql.DataFrame = [activityId: bigint, athleteId: bigint ... 4 more fields]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3755","true/jobs/job?id=3755","true/jobs/job?id=3755","true/jobs/job?id=3755","true/jobs/job?id=3756","true/jobs/job?id=3756","true/jobs/job?id=3756","true/jobs/job?id=3756"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578506007506_-265962946","id":"20200107-174130_1860482675","dateCreated":"2020-01-08T17:53:27+0000","dateStarted":"2020-01-10T19:11:53+0000","dateFinished":"2020-01-10T19:11:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119067"},{"text":"\nimport org.apache.spark.ml.regression.LinearRegression\n\n\n  def getLinearRegressionPipeline(): Pipeline = {\n\n    val lr = new LinearRegression().\n      setLabelCol(\"truth\").\n      setFeaturesCol(\"features\").\n      setPredictionCol(\"routeETA\").\n      setElasticNetParam(0.1).\n      setMaxIter(300)\n    new Pipeline().setStages(Array(lr))\n  }\n  \n  val modelPipeline = getLinearRegressionPipeline.fit(train)","user":"anonymous","dateUpdated":"2020-01-10T19:06:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.regression.LinearRegression\ngetLinearRegressionPipeline: ()org.apache.spark.ml.Pipeline\nmodelPipeline: org.apache.spark.ml.PipelineModel = pipeline_6709cff23015\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3733","true/jobs/job?id=3733","true/jobs/job?id=3733","true/jobs/job?id=3733","true/jobs/job?id=3734","true/jobs/job?id=3734","true/jobs/job?id=3734","true/jobs/job?id=3734","true/jobs/job?id=3735","true/jobs/job?id=3735","true/jobs/job?id=3735","true/jobs/job?id=3735","true/jobs/job?id=3736","true/jobs/job?id=3736","true/jobs/job?id=3736","true/jobs/job?id=3736","true/jobs/job?id=3737","true/jobs/job?id=3737","true/jobs/job?id=3737","true/jobs/job?id=3737","true/jobs/job?id=3738","true/jobs/job?id=3738","true/jobs/job?id=3738","true/jobs/job?id=3738"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578517744652_-128168194","id":"20200108-210904_1129159560","dateCreated":"2020-01-08T21:09:04+0000","dateStarted":"2020-01-10T19:06:01+0000","dateFinished":"2020-01-10T19:06:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119068"},{"text":"val path = s\"s3a://strava.scratch/gbm/bay-area/routeEtaModel/v0.1\"\nmodelPipeline.write.overwrite().save(path)","user":"anonymous","dateUpdated":"2020-01-10T19:06:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"path: String = s3a://strava.scratch/gbm/bay-area/routeEtaModel/v0.1\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3739","true/jobs/job?id=3739","true/jobs/job?id=3739","true/jobs/job?id=3739","true/jobs/job?id=3740","true/jobs/job?id=3740","true/jobs/job?id=3740","true/jobs/job?id=3740","true/jobs/job?id=3741","true/jobs/job?id=3741","true/jobs/job?id=3741","true/jobs/job?id=3741"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578519995224_1470255177","id":"20200108-214635_1148051843","dateCreated":"2020-01-08T21:46:35+0000","dateStarted":"2020-01-10T19:06:13+0000","dateFinished":"2020-01-10T19:06:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119069"},{"text":"modelPipeline.transform(validation).drop(\"features\").repartition(1).\nwrite.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").\nparquet(s\"s3a://strava.scratch/gbm/bay-area/routeEtaResult/v0.1/validation\")","user":"anonymous","dateUpdated":"2020-01-10T19:12:14+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3757","true/jobs/job?id=3757","true/jobs/job?id=3757","true/jobs/job?id=3757"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578520056000_1023431418","id":"20200108-214736_257502140","dateCreated":"2020-01-08T21:47:36+0000","dateStarted":"2020-01-10T19:12:14+0000","dateFinished":"2020-01-10T19:12:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119070"},{"text":"modelPipeline.transform(train).drop(\"features\").repartition(1).\nwrite.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").\nparquet(s\"s3a://strava.scratch/gbm/bay-area/routeEtaResult/v0.1/train\")","user":"anonymous","dateUpdated":"2020-01-10T19:12:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3758","true/jobs/job?id=3758","true/jobs/job?id=3758","true/jobs/job?id=3758"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578524765432_650101975","id":"20200108-230605_624274298","dateCreated":"2020-01-08T23:06:05+0000","dateStarted":"2020-01-10T19:12:20+0000","dateFinished":"2020-01-10T19:12:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119071"},{"text":"spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/routeEtaResult/v0.1/validation\").printSchema\nval validationDf = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/routeEtaResult/v0.1/validation\").\nwithColumnRenamed(\"routeDistance\",\"distance\").\nwithColumnRenamed(\"routeETA\", \"routeEstimation\")\n\n\nvalidationDf.printSchema\nvalidationDf.createOrReplaceTempView(\"validationResult\")","user":"anonymous","dateUpdated":"2020-01-12T03:57:54+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- routeDistance: double (nullable = true)\n |-- numEdges: integer (nullable = true)\n |-- truth: double (nullable = true)\n |-- routeETA: double (nullable = true)\n\nvalidationDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [activityId: bigint, athleteId: bigint ... 4 more fields]\nroot\n |-- activityId: long (nullable = true)\n |-- athleteId: long (nullable = true)\n |-- distance: double (nullable = true)\n |-- numEdges: integer (nullable = true)\n |-- truth: double (nullable = true)\n |-- routeEstimation: double (nullable = true)\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3790","true/jobs/job?id=3790","true/jobs/job?id=3790","true/jobs/job?id=3790","true/jobs/job?id=3790","true/jobs/job?id=3791","true/jobs/job?id=3791","true/jobs/job?id=3791","true/jobs/job?id=3791","true/jobs/job?id=3791"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578524957724_308720707","id":"20200108-230917_2120576542","dateCreated":"2020-01-08T23:09:17+0000","dateStarted":"2020-01-10T19:47:55+0000","dateFinished":"2020-01-10T19:47:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119072"},{"text":"val myQuery = \"\"\"\nselect\n\napprox_percentile(  abs(routeEstimation-truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(  abs(routeEstimation-truth)/truth, 0.9)*100 as p90,\napprox_percentile(   abs(routeEstimation-truth)/truth, 0.95)*100 as p95,\napprox_percentile(  abs(routeEstimation-truth)/truth,0.99)*100 as p99\n\nfrom validationResult\n\n\"\"\"\nspark.sql(myQuery).show","user":"anonymous","dateUpdated":"2020-01-10T19:48:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nselect\n\napprox_percentile(  abs(routeEstimation-truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(  abs(routeEstimation-truth)/truth, 0.9)*100 as p90,\napprox_percentile(   abs(routeEstimation-truth)/truth, 0.95)*100 as p95,\napprox_percentile(  abs(routeEstimation-truth)/truth,0.99)*100 as p99\n\nfrom validationResult\n\n\"\n+-----------------+-----------------+------------------+------------------+\n|              p50|              p90|               p95|               p99|\n+-----------------+-----------------+------------------+------------------+\n|6.140693862709809|19.52546790901084|27.274639393756946|51.243030190112584|\n+-----------------+-----------------+------------------+------------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3792","true/jobs/job?id=3792","true/jobs/job?id=3792","true/jobs/job?id=3792","true/jobs/job?id=3792"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578525066258_64684500","id":"20200108-231106_340430311","dateCreated":"2020-01-08T23:11:06+0000","dateStarted":"2020-01-10T19:48:03+0000","dateFinished":"2020-01-10T19:48:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119073"},{"text":"val myQuery = \"\"\"\nselect\n\n\napprox_percentile(  abs(routeEstimation-truth), 0.5)/60 as p50,\n\napprox_percentile(  abs(routeEstimation-truth), 0.9)/60 as p90,\napprox_percentile(   abs(routeEstimation-truth), 0.95)/60 as p95,\napprox_percentile(  abs(routeEstimation-truth),0.99)/60 as p99\n\nfrom validationResult\n\n\"\"\"\nspark.sql(myQuery).show","user":"anonymous","dateUpdated":"2020-01-10T19:48:11+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nselect\n\n\napprox_percentile(  abs(routeEstimation-truth), 0.5)/60 as p50,\n\napprox_percentile(  abs(routeEstimation-truth), 0.9)/60 as p90,\napprox_percentile(   abs(routeEstimation-truth), 0.95)/60 as p95,\napprox_percentile(  abs(routeEstimation-truth),0.99)/60 as p99\n\nfrom validationResult\n\n\"\n+-----------------+------------------+------------------+------------------+\n|              p50|               p90|               p95|               p99|\n+-----------------+------------------+------------------+------------------+\n|2.048981988227672|7.1491290532058205|10.251699883286944|20.425784010147915|\n+-----------------+------------------+------------------+------------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3793","true/jobs/job?id=3793","true/jobs/job?id=3793","true/jobs/job?id=3793","true/jobs/job?id=3793"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578525231856_-1729856730","id":"20200108-231351_239110906","dateCreated":"2020-01-08T23:13:51+0000","dateStarted":"2020-01-10T19:48:11+0000","dateFinished":"2020-01-10T19:48:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119074"},{"text":"\nval myQuery = \"\"\"\nselect \n*,\ncase when distance < 3200 then 0\n     when distance>=3200 and distance<8000 then 1\n    when distance>=8000 and distance<16000 then 2\n     when distance>=16000 and distance<20000 then 3\n    else 4 end\nAS bucket\nfrom validationResult\n\"\"\"\nval bucketDf = spark.sql(myQuery)\nbucketDf.cache()\nbucketDf.createOrReplaceTempView(\"buckets\")","user":"anonymous","dateUpdated":"2020-01-10T19:48:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nselect\n*,\ncase when distance < 3200 then 0\n     when distance>=3200 and distance<8000 then 1\n    when distance>=8000 and distance<16000 then 2\n     when distance>=16000 and distance<20000 then 3\n    else 4 end\nAS bucket\nfrom validationResult\n\"\nbucketDf: org.apache.spark.sql.DataFrame = [activityId: bigint, athleteId: bigint ... 5 more fields]\nres56: bucketDf.type = [activityId: bigint, athleteId: bigint ... 5 more fields]\n"}]},"apps":[],"jobName":"paragraph_1578525319613_691679794","id":"20200108-231519_766162392","dateCreated":"2020-01-08T23:15:19+0000","dateStarted":"2020-01-10T19:48:18+0000","dateFinished":"2020-01-10T19:48:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119075"},{"text":"spark.sql(\"\"\"\nselect bucket, count(1) from buckets\ngroup by bucket\norder by bucket\n\"\"\").collect","user":"anonymous","dateUpdated":"2020-01-10T19:48:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res58: Array[org.apache.spark.sql.Row] = Array([0,16762], [1,94177], [2,50066], [3,3774], [4,1882])\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3794","true/jobs/job?id=3794","true/jobs/job?id=3794","true/jobs/job?id=3794","true/jobs/job?id=3794","true/jobs/job?id=3795","true/jobs/job?id=3795","true/jobs/job?id=3795","true/jobs/job?id=3795","true/jobs/job?id=3795"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578683863603_1611723113","id":"20200110-191743_1218568651","dateCreated":"2020-01-10T19:17:43+0000","dateStarted":"2020-01-10T19:48:21+0000","dateFinished":"2020-01-10T19:48:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119076"},{"text":"val myQuery = \"\"\"\nwith b0 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstimation - truth), 0.9) / 60 as p90,\napprox_percentile(abs(routeEstimation - truth), 0.95) / 60 as p95,\napprox_percentile(abs(routeEstimation - truth), 0.99) / 60 as p99,\n100 as name\n\nfrom buckets\nwhere bucket = 0\n),\n\nb1 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstimation - truth), 0.9) / 60 as p90,\napprox_percentile(abs(routeEstimation - truth), 0.95) / 60 as p95,\napprox_percentile(abs(routeEstimation - truth), 0.99) / 60 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 1\n),\nb2 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstimation - truth), 0.9) / 60 as p90,\napprox_percentile(abs(routeEstimation - truth), 0.95) / 60 as p95,\napprox_percentile(abs(routeEstimation - truth), 0.99) / 60 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 2\n),\nb3 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstimation - truth), 0.9) / 60 as p90,\napprox_percentile(abs(routeEstimation - truth), 0.95) / 60 as p95,\napprox_percentile(abs(routeEstimation - truth), 0.99) / 60 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 3\n),\nb4 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstimation - truth), 0.9) / 60 as p90,\napprox_percentile(abs(routeEstimation - truth), 0.95) / 60 as p95,\napprox_percentile(abs(routeEstimation - truth), 0.99) / 60 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 4\n)\n\nselect\narray(b0.p50, b1.p50, b2.p50, b3.p50, b4.p50) as p50,\narray(b0.p90, b1.p90, b2.p90, b3.p90, b4.p90) as p90,\narray(b0.p95, b1.p95, b2.p95, b3.p95, b4.p95) as p95,\narray(b0.p99, b1.p99, b2.p99, b3.p99, b4.p99) as p99\n\nfrom b0 join b1 on b0.name = b1.name\njoin b2 on b0.name=b2.name\njoin b3 on b0.name=b3.name\njoin b4 on b0.name=b4.name\n\n\"\"\"\nval percentiles = spark.sql(myQuery).collect","user":"anonymous","dateUpdated":"2020-01-10T19:48:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nwith b0 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstimation - truth), 0.9) / 60 as p90,\napprox_percentile(abs(routeEstimation - truth), 0.95) / 60 as p95,\napprox_percentile(abs(routeEstimation - truth), 0.99) / 60 as p99,\n100 as name\n\nfrom buckets\nwhere bucket = 0\n),\n\nb1 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstimation - truth), 0.9) / 60 as p90,\napprox_percentile(abs(routeEstimation - truth), 0.95) / 60 as p95,\napprox_percentile(abs(routeEstimation - truth), 0.99) / 60 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 1\n),\nb2 as (\nselect\napprox_percentile(abs(routeEstimation - truth), 0.5) / 60 as p50,\n\napprox_percentile(abs(routeEstim...percentiles: Array[org.apache.spark.sql.Row] = Array([WrappedArray(1.2123535116872783, 1.8480032354203635, 2.7956310881749005, 4.361043442794638, 5.877888716519252),WrappedArray(70.27042576340467, 5.87034524891274, 8.870493516898925, 12.810692149830766, 17.602259459125374),WrappedArray(70.27042576340467, 8.310338069046876, 12.145520456801401, 16.8870220440132, 24.79577394610842),WrappedArray(70.27042576340467, 16.98548537295538, 22.538033057758245, 35.61829666683261, 83.90337653577681)])\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3796","true/jobs/job?id=3796","true/jobs/job?id=3796","true/jobs/job?id=3796","true/jobs/job?id=3796","true/jobs/job?id=3797","true/jobs/job?id=3797","true/jobs/job?id=3797","true/jobs/job?id=3797","true/jobs/job?id=3797","true/jobs/job?id=3798","true/jobs/job?id=3798","true/jobs/job?id=3798","true/jobs/job?id=3798","true/jobs/job?id=3798","true/jobs/job?id=3799","true/jobs/job?id=3799","true/jobs/job?id=3799","true/jobs/job?id=3799","true/jobs/job?id=3799","true/jobs/job?id=3800","true/jobs/job?id=3800","true/jobs/job?id=3800","true/jobs/job?id=3800","true/jobs/job?id=3800"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578684074479_2047733942","id":"20200110-192114_126931500","dateCreated":"2020-01-10T19:21:14+0000","dateStarted":"2020-01-10T19:48:38+0000","dateFinished":"2020-01-10T19:48:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119077"},{"text":"val myQuery = \"\"\"\nwith b0 as (\nselect\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(abs(routeEstimation - truth)/truth, 0.9)*100 as p90,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.95)*100 as p95,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.99)*100 as p99,\n100 as name\n\nfrom buckets\nwhere bucket = 0\n),\n\nb1 as (\nselect\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(abs(routeEstimation - truth)/truth, 0.9)*100 as p90,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.95)*100 as p95,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.99)*100 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 1\n),\nb2 as (\nselect\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(abs(routeEstimation - truth)/truth, 0.9)*100 as p90,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.95)*100 as p95,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.99)*100 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 2\n),\nb3 as (\nselectf\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(abs(routeEstimation - truth)/truth, 0.9)*100 as p90,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.95)*100 as p95,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.99)*100 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 3\n),\nb4 as (\nselect\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(abs(routeEstimation - truth)/truth, 0.9)*100 as p90,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.95)*100 as p95,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.99)*100 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 4\n)\n\nselect\narray(b0.p50, b1.p50, b2.p50, b3.p50, b4.p50) as p50,\narray(b0.p90, b1.p90, b2.p90, b3.p90, b4.p90) as p90,\narray(b0.p95, b1.p95, b2.p95, b3.p95, b4.p95) as p95,\narray(b0.p99, b1.p99, b2.p99, b3.p99, b4.p99) as p99\n\nfrom b0 join b1 on b0.name = b1.name\njoin b2 on b0.name=b2.name\njoin b3 on b0.name=b3.name\njoin b4 on b0.name=b4.name\n\n\"\"\"\nval percentiles = spark.sql(myQuery).collect","user":"anonymous","dateUpdated":"2020-01-10T19:49:56+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nwith b0 as (\nselect\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(abs(routeEstimation - truth)/truth, 0.9)*100 as p90,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.95)*100 as p95,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.99)*100 as p99,\n100 as name\n\nfrom buckets\nwhere bucket = 0\n),\n\nb1 as (\nselect\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*100 as p50,\n\napprox_percentile(abs(routeEstimation - truth)/truth, 0.9)*100 as p90,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.95)*100 as p95,\napprox_percentile(abs(routeEstimation - truth)/truth, 0.99)*100 as p99,\n100 as name\n\n\nfrom buckets\nwhere bucket = 1\n),\nb2 as (\nselect\napprox_percentile(abs(routeEstimation - truth)/truth, 0.5)*...percentiles: Array[org.apache.spark.sql.Row] = Array([WrappedArray(9.56140565540519, 6.32197498895625, 5.251265664747074, 4.9799002940943975, 5.16333194799505),WrappedArray(242.4249852849278, 19.45494141352542, 15.789689351820554, 14.531555785831983, 15.99488511031917),WrappedArray(242.4249852849278, 26.428736123132033, 21.229407362188354, 19.119389474473355, 21.444344655034474),WrappedArray(242.4249852849278, 46.96339505463295, 40.08480948965493, 41.775441898071776, 67.3800922735538)])\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["true/jobs/job?id=3801","true/jobs/job?id=3801","true/jobs/job?id=3801","true/jobs/job?id=3801","true/jobs/job?id=3801","true/jobs/job?id=3802","true/jobs/job?id=3802","true/jobs/job?id=3802","true/jobs/job?id=3802","true/jobs/job?id=3802","true/jobs/job?id=3803","true/jobs/job?id=3803","true/jobs/job?id=3803","true/jobs/job?id=3803","true/jobs/job?id=3803","true/jobs/job?id=3804","true/jobs/job?id=3804","true/jobs/job?id=3804","true/jobs/job?id=3804","true/jobs/job?id=3804","true/jobs/job?id=3805","true/jobs/job?id=3805","true/jobs/job?id=3805","true/jobs/job?id=3805","true/jobs/job?id=3805"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578683967561_1070356118","id":"20200110-191927_1777937916","dateCreated":"2020-01-10T19:19:27+0000","dateStarted":"2020-01-10T19:48:43+0000","dateFinished":"2020-01-10T19:48:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119078"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578684045886_-462197860","id":"20200110-192045_342692087","dateCreated":"2020-01-10T19:20:45+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:119079"}],"name":"/lucindaz/edgeToRouteV0.1","id":"2EXFTZTFQ","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}