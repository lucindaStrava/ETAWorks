{"paragraphs":[{"text":"import spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions.{broadcast, col, sum}","user":"anonymous","dateUpdated":"2019-12-03T05:37:00+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions.{broadcast, col, sum}\n"}]},"apps":[],"jobName":"paragraph_1574796675536_1220180188","id":"20191125-201541_1488915145","dateCreated":"2019-11-26T19:31:15+0000","dateStarted":"2019-12-02T18:15:09+0000","dateFinished":"2019-12-02T18:15:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:87183"},{"text":"val ACTIVITY_TYPES = Map(\"Run\" -> 0, \"Ride\" -> 1)\n\n  case class LatLng(\n                     lat: Double,\n                     lng: Double\n                   )\n                   \ncase class FinalStream(\n                           activityId: Long,\n                           athleteId: Long,\n                           edgeUID: Long,\n                           activityType: String,\n                           streamStartPointer: Double,\n                           streamEndPointer: Double,\n                           meanDistance: Double,\n                           elapsedTime: Double,\n                           meanSpeed: Double,\n                           coverage: Double,\n                           startDateLocal: Double,\n                           time: Option[Array[Double]],\n                           latlng: Option[Array[LatLng]],\n                           speed: Option[Array[Double]],\n                           elevation: Option[Array[Double]],\n                           cadence: Option[Array[Double]],\n                           heartrate: Option[Array[Double]],\n                           power: Option[Array[Double]]\n                         )\n                         \n  case class EdgeStat(\n                       activityId: Long,\n                       athleteId: Long,\n                       edgeUID: Long,\n                       activityType: Int,\n                       meanDistance: Double,\n                       elapsedTime: Double,\n                       meanSpeed: Double,\n                       speedFeatures: Option[Array[Double]],\n                       elevationFeatures: Option[Array[Double]],\n                       cadenceFeatures: Option[Array[Double]],\n                       heartrateFeatures: Option[Array[Double]],\n                       powerFeatures: Option[Array[Double]]\n                     )\n\n  ","user":"anonymous","dateUpdated":"2019-12-02T21:04:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ACTIVITY_TYPES: scala.collection.immutable.Map[String,Int] = Map(Run -> 0, Ride -> 1)\ndefined class LatLng\ndefined class FinalStream\ndefined class EdgeStat\n"}]},"apps":[],"jobName":"paragraph_1574796675540_583788260","id":"20191120-191348_1752848390","dateCreated":"2019-11-26T19:31:15+0000","dateStarted":"2019-12-02T21:04:18+0000","dateFinished":"2019-12-02T21:04:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87184"},{"text":"def stats(x: Array[Double]) = {\n    // get stats in one pass [start, end, min, max, mean, std]\n    val minV: Double = Int.MaxValue\n    val maxV: Double = Int.MinValue\n\n    // init min, max, sum, sum of square\n    val result = x.foldLeft((minV, maxV, 0.0, 0.0))(\n      (pre, curr) => (pre._1 min curr, pre._2 max curr, pre._3 + curr, pre._4 + curr * curr))\n    val meanVal = result._3 / x.size\n\n    // start, end, min, max, sum, sum of square\n    Array(x(0), x(x.size - 1), result._1, result._2, meanVal, Math.sqrt(result._4 / x.size - meanVal * meanVal) )\n  }\n\n  def extractFeature(x: FinalStream): EdgeStat = {\n    new EdgeStat(\n      x.activityId,\n      x.athleteId,\n      x.edgeUID,\n      ACTIVITY_TYPES.getOrElse(x.activityType, -1),\n      x.meanDistance,\n      x.elapsedTime,\n      x.meanSpeed,\n      x.speed.map(stats),\n      x.elevation.map(stats),\n      x.cadence.map(stats),\n      x.heartrate.map(stats),\n      x.power.map(stats)\n    )\n  }\n\n  def extractFeatureWrapper(x: FinalStream): EdgeStat = {\n    try {\n      extractFeature(x)\n    } catch {\n      case e: Exception => None.orNull\n    }\n  }","user":"anonymous","dateUpdated":"2019-11-26T19:40:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"stats: (x: Array[Double])Array[Double]\nextractFeature: (x: FinalStream)EdgeStat\nextractFeatureWrapper: (x: FinalStream)EdgeStat\n"}]},"apps":[],"jobName":"paragraph_1574797094782_-706938171","id":"20191126-193814_781885423","dateCreated":"2019-11-26T19:38:14+0000","dateStarted":"2019-11-26T19:40:40+0000","dateFinished":"2019-11-26T19:40:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87185"},{"text":"// extract data from bay-area alignment and full stream data directly\nimport org.apache.spark.sql.{SaveMode}\n\nRange(2765, 2800).foreach{\n   \nkey =>\n{\n  print(s\"Extracting edge stat for key=$key \\n\")\n  val statDF = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/alignStreamTest/key=$key\")\n.as[FinalStream].map(extractFeatureWrapper).filter(v => Option(v).isDefined).as[EdgeStat]\n\nstatDF.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/edgeStat/key=$key\")\n}\n}","user":"anonymous","dateUpdated":"2019-11-28T02:34:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.SaveMode\nExtracting edge stat for key=2765 \nExtracting edge stat for key=2766 \nExtracting edge stat for key=2767 \nExtracting edge stat for key=2768 \nExtracting edge stat for key=2769 \nExtracting edge stat for key=2770 \nExtracting edge stat for key=2771 \nExtracting edge stat for key=2772 \nExtracting edge stat for key=2773 \nExtracting edge stat for key=2774 \nExtracting edge stat for key=2775 \nExtracting edge stat for key=2776 \nExtracting edge stat for key=2777 \nExtracting edge stat for key=2778 \nExtracting edge stat for key=2779 \nExtracting edge stat for key=2780 \nExtracting edge stat for key=2781 \nExtracting edge stat for key=2782 \nExtracting edge stat for key=2783 \nExtracting edge stat for key=2784 \nExtracting edge stat for key=2785 \nExtracting edge stat for key=2786 \nExtracting edge stat for key=2787 \nExtracting edge stat for key=2788 \nExtracting edge stat for key=2789 \nExtracting edge stat for key=2790 \nExtracting edge stat for key=2791 \nExtracting edge stat for key=2792 \nExtracting edge stat for key=2793 \nExtracting edge stat for key=2794 \nExtracting edge stat for key=2795 \nExtracting edge stat for key=2796 \nExtracting edge stat for key=2797 \nExtracting edge stat for key=2798 \nExtracting edge stat for key=2799 \n"}]},"apps":[],"jobName":"paragraph_1574798618543_-416194054","id":"20191126-200338_636111312","dateCreated":"2019-11-26T20:03:38+0000","dateStarted":"2019-11-28T02:34:33+0000","dateFinished":"2019-11-28T02:46:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87186"},{"text":"val edgeDF = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/edgeStat/\").filter(col(\"activityType\").equalTo(0))\n\n","user":"anonymous","dateUpdated":"2019-12-02T20:59:56+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"edgeDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [activityId: bigint, athleteId: bigint ... 11 more fields]\n"}]},"apps":[],"jobName":"paragraph_1574796675553_-1879722587","id":"20191123-054519_111076761","dateCreated":"2019-11-26T19:31:15+0000","dateStarted":"2019-12-02T20:59:56+0000","dateFinished":"2019-12-02T21:00:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87187"},{"text":"edgeDF.createOrReplaceTempView(\"edges\")\n\n","user":"anonymous","dateUpdated":"2019-12-02T20:59:58+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1574797383367_-59643091","id":"20191126-194303_1019091587","dateCreated":"2019-11-26T19:43:03+0000","dateStarted":"2019-12-02T20:59:58+0000","dateFinished":"2019-12-02T21:00:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87188"},{"text":"val edgeIds = spark.sql(\"select edgeUID, count(1) as totalTraversals from edges \" +\n      \"group by edgeUID\").filter(col(\"totalTraversals\").gt(100))\n// edgeIds.cache()\n// edgeIds.agg(sum(\"totalTraversals\")).collect\n","user":"anonymous","dateUpdated":"2019-12-02T21:11:22+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"edgeIds: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [edgeUID: bigint, totalTraversals: bigint]\nres31: edgeIds.type = [edgeUID: bigint, totalTraversals: bigint]\nres32: Array[org.apache.spark.sql.Row] = Array([163002377])\n"}]},"apps":[],"jobName":"paragraph_1575305432496_-1653746488","id":"20191202-165032_2057299513","dateCreated":"2019-12-02T16:50:32+0000","dateStarted":"2019-12-02T17:28:08+0000","dateFinished":"2019-12-02T17:28:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87189"},{"text":"// // actually we could skip this part... just calculate percentiles for all edges?\n// // which spark version are we using?\n// // Have to break lineage to avoid the bug described here https://stackoverflow.com/a/44762495 nee\n// val ids = edgeIds.select(\"edgeUID\").collect\n// val idRDD = sc.parallelize(ids)\n\n// import org.apache.spark.sql.types.{LongType, StructField, StructType}\n\n// val schema = new StructType()\n//   .add(StructField(\"id\", LongType, true))\n// val idDF = spark.createDataFrame(idRDD, schema)\n\n// val broadcastId = broadcast(idDF.cache())\n\n\n// val statDF = edgeDF.joinWith(broadcastId, edgeDF(\"edgeUID\") === broadcastId(\"id\")).select(\"_1.*\")\n// statDF.createOrReplaceTempView(\"finalStats\")\n\n// statDF.count","user":"anonymous","dateUpdated":"2019-12-02T21:11:32+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ids: Array[org.apache.spark.sql.Row] = Array([211199099], [-211200338], [-211180642], [211188226], [211454125], [-211155430], [211197342], [211192844], [211511832], [-211158142], [-211856967], [-211857670], [-211199379], [-211482428], [-211205977], [211161074], [-211182384], [211153622], [211175683], [-211154937], [-211151833], [211870920], [211199835], [-211845672], [211877449], [211403532], [211156263], [211188308], [-211780044], [211177704], [-212251796], [211517183], [211163830], [-211190663], [211845172], [-211159381], [211165078], [211443329], [211176795], [211170172], [-211151386], [-211524085], [-211441388], [211169797], [211183746], [212086104], [211201847], [211844445], [211489061], [211489022], [-211848901], [211203406], [-211849693], [-211206475], [211184739], [-211205543], ..."}]},"apps":[],"jobName":"paragraph_1575307773000_-1894201275","id":"20191202-172933_1883595217","dateCreated":"2019-12-02T17:29:33+0000","dateStarted":"2019-12-02T17:59:42+0000","dateFinished":"2019-12-02T17:59:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87190"},{"text":"val ids = edgeIds.select(\"edgeUID\").collect\nval xx = ids.map(_.getLong(0))","user":"anonymous","dateUpdated":"2019-12-05T16:17:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1575321020489_981608536","id":"20191202-211020_1552747942","dateCreated":"2019-12-02T21:10:20+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:87191"},{"text":"val mySql =\n\n    \"\"\"\n       |select edgeUID, count(1) as totalTraversals,\n |approx_percentile(meanDistance, 0.1) as meanD_p10,\n |approx_percentile(meanDistance, 0.5) as meanD_p50,\n |approx_percentile(meanDistance, 0.9) as meanD_p90,\n |\n |approx_percentile(elapsedTime, 0.1) as t_p10,\n |approx_percentile(elapsedTime, 0.5) as t_p50,\n |approx_percentile(elapsedTime, 0.9) as t_p90,\n |\n |approx_percentile(meanSpeed, 0.1) as meanS_p10,\n |approx_percentile(meanSpeed, 0.5) as meanS_p50,\n |approx_percentile(meanSpeed, 0.9) as meanS_p90,\n |\n |  approx_percentile(speedFeatures[0], 0.1) as startS_p10,\n |approx_percentile(speedFeatures[0], 0.5) as startS_p50,\n |approx_percentile(speedFeatures[0], 0.9) as startS_p90,\n |\n |  approx_percentile(speedFeatures[1], 0.1) as endS_p10,\n |approx_percentile(speedFeatures[1], 0.5) as endS_p50,\n |approx_percentile(speedFeatures[1], 0.9) as endS_p90,\n |\n |  approx_percentile(speedFeatures[2], 0.1) as minS_p10,\n |approx_percentile(speedFeatures[2], 0.5) as minS_p50,\n |approx_percentile(speedFeatures[2], 0.9) as minS_p90,\n |\n |  approx_percentile(speedFeatures[3], 0.1) as maxS_p10,\n |approx_percentile(speedFeatures[3], 0.5) as maxS_p50,\n |approx_percentile(speedFeatures[3], 0.9) as maxS_p90,\n |\n |  approx_percentile(speedFeatures[4], 0.1) as meanSS_p10,\n |approx_percentile(speedFeatures[4], 0.5) as meanSS_p50,\n |approx_percentile(speedFeatures[4], 0.9) as meanSS_p90,\n |\n |  approx_percentile(speedFeatures[5], 0.1) as stdS_p10,\n |approx_percentile(speedFeatures[5], 0.5) as stdS_p50,\n |approx_percentile(speedFeatures[5], 0.9) as stdS_p90,\n |\n |approx_percentile(elevationFeatures[0], 0.5) as startE_p50,\n |approx_percentile(elevationFeatures[1], 0.5) as endE_p50,\n |approx_percentile(elevationFeatures[2], 0.5) as minE_p50,\n |approx_percentile(elevationFeatures[3], 0.5) as maxE_p50,\n |approx_percentile(elevationFeatures[4], 0.5) as meanE_p50,\n |approx_percentile(elevationFeatures[5], 0.5) as stdE_p50,\n |\n |  approx_percentile(cadenceFeatures[0], 0.1) as startC_p10,\n |approx_percentile(cadenceFeatures[0], 0.5) as startC_p50,\n |approx_percentile(cadenceFeatures[0], 0.9) as startC_p90,\n |\n |  approx_percentile(cadenceFeatures[1], 0.1) as endC_p10,\n |approx_percentile(cadenceFeatures[1], 0.5) as endC_p50,\n |approx_percentile(cadenceFeatures[1], 0.9) as endC_p90,\n |\n |  approx_percentile(cadenceFeatures[2], 0.1) as minC_p10,\n |approx_percentile(cadenceFeatures[2], 0.5) as minC_p50,\n |approx_percentile(cadenceFeatures[2], 0.9) as minC_p90,\n |\n |  approx_percentile(cadenceFeatures[3], 0.1) as maxC_p10,\n |approx_percentile(cadenceFeatures[3], 0.5) as maxC_p50,\n |approx_percentile(cadenceFeatures[3], 0.9) as maxC_p90,\n |\n |  approx_percentile(cadenceFeatures[4], 0.1) as meanC_p10,\n |approx_percentile(cadenceFeatures[4], 0.5) as meanC_p50,\n |approx_percentile(cadenceFeatures[4], 0.9) as meanC_p90,\n |\n |  approx_percentile(cadenceFeatures[5], 0.1) as stdC_p10,\n |approx_percentile(cadenceFeatures[5], 0.5) as stdC_p50,\n |approx_percentile(cadenceFeatures[5], 0.9) as stdC_p90,\n |\n |  approx_percentile(heartrateFeatures[0], 0.1) as startH_p10,\n |approx_percentile(heartrateFeatures[0], 0.5) as startH_p50,\n |approx_percentile(heartrateFeatures[0], 0.9) as startH_p90,\n |\n |  approx_percentile(heartrateFeatures[1], 0.1) as endH_p10,\n |approx_percentile(heartrateFeatures[1], 0.5) as endH_p50,\n |approx_percentile(heartrateFeatures[1], 0.9) as endH_p90,\n |\n |  approx_percentile(heartrateFeatures[2], 0.1) as minH_p10,\n |approx_percentile(heartrateFeatures[2], 0.5) as minH_p50,\n |approx_percentile(heartrateFeatures[2], 0.9) as minH_p90,\n |\n |  approx_percentile(heartrateFeatures[3], 0.1) as maxH_p10,\n |approx_percentile(heartrateFeatures[3], 0.5) as maxH_p50,\n |approx_percentile(heartrateFeatures[3], 0.9) as maxH_p90,\n |\n |  approx_percentile(heartrateFeatures[4], 0.1) as meanH_p10,\n |approx_percentile(heartrateFeatures[4], 0.5) as meanH_p50,\n |approx_percentile(heartrateFeatures[4], 0.9) as meanH_p90,\n |\n |  approx_percentile(heartrateFeatures[5], 0.1) as stdH_p10,\n |approx_percentile(heartrateFeatures[5], 0.5) as stdH_p50,\n |approx_percentile(heartrateFeatures[5], 0.9) as stdH_p90\n |\n |\n |from finalStats\n |group by edgeUID\n |\n |\n\n    \"\"\".stripMargin","user":"anonymous","dateUpdated":"2019-12-02T21:15:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"mySql: String =\n\"\nselect edgeUID, count(1) as totalTraversals,\napprox_percentile(meanDistance, 0.1) as meanD_p10,\napprox_percentile(meanDistance, 0.5) as meanD_p50,\napprox_percentile(meanDistance, 0.9) as meanD_p90,\n\napprox_percentile(elapsedTime, 0.1) as t_p10,\napprox_percentile(elapsedTime, 0.5) as t_p50,\napprox_percentile(elapsedTime, 0.9) as t_p90,\n\napprox_percentile(meanSpeed, 0.1) as meanS_p10,\napprox_percentile(meanSpeed, 0.5) as meanS_p50,\napprox_percentile(meanSpeed, 0.9) as meanS_p90,\n\n  approx_percentile(speedFeatures[0], 0.1) as startS_p10,\napprox_percentile(speedFeatures[0], 0.5) as startS_p50,\napprox_percentile(speedFeatures[0], 0.9) as startS_p90,\n\n  approx_percentile(speedFeatures[1], 0.1) as endS_p10,\napprox_percentile(speedFeatures[1], 0.5) as endS_p50,\napprox_percenti..."}]},"apps":[],"jobName":"paragraph_1575321199414_-1240266651","id":"20191202-211319_252437331","dateCreated":"2019-12-02T21:13:19+0000","dateStarted":"2019-12-02T21:15:19+0000","dateFinished":"2019-12-02T21:15:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87192"},{"text":"val chunkSize = 10000\nval numPartitions = (ids.size / chunkSize).toInt + 1\nval lastIdx = ids.size\nRange(2, numPartitions).foreach{ key =>\n    val sIdx = key * chunkSize\n    val eIdx = Math.min(sIdx + chunkSize, lastIdx)\n    val filterSet = xx.slice(sIdx, eIdx).toSet\n    val filterSetB = spark.sparkContext.broadcast(filterSet)\n    val filteredDF = edgeDF.as[EdgeStat].filter(col(\"edgeUID\").isInCollection(filterSetB.value))\n    filteredDF.repartition(10).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/edgeStat_temp/$key\")\n    spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/edgeStat_temp/$key\").createOrReplaceTempView(\"finalStats\")\n    spark.sql(mySql).repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/edgeAggFeature/$key\")\n}\n\n","user":"anonymous","dateUpdated":"2019-12-05T16:19:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"chunkSize: Int = 10000\nnumPartitions: Int = 20\nlastIdx: Int = 198463\n"}]},"apps":[],"jobName":"paragraph_1575306113058_-158323149","id":"20191202-170153_1091461015","dateCreated":"2019-12-02T17:01:53+0000","dateStarted":"2019-12-02T22:44:51+0000","dateFinished":"2019-12-03T00:36:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87193"},{"text":"// impute null and assemble all features as a single vector\nval df = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/edgeAggFeature\")\ndf.printSchema\n","user":"anonymous","dateUpdated":"2019-12-05T16:20:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [edgeUID: bigint, totalTraversals: bigint ... 69 more fields]\nroot\n |-- edgeUID: long (nullable = true)\n |-- totalTraversals: long (nullable = true)\n |-- meanD_p10: double (nullable = true)\n |-- meanD_p50: double (nullable = true)\n |-- meanD_p90: double (nullable = true)\n |-- t_p10: double (nullable = true)\n |-- t_p50: double (nullable = true)\n |-- t_p90: double (nullable = true)\n |-- meanS_p10: double (nullable = true)\n |-- meanS_p50: double (nullable = true)\n |-- meanS_p90: double (nullable = true)\n |-- startS_p10: double (nullable = true)\n |-- startS_p50: double (nullable = true)\n |-- startS_p90: double (nullable = true)\n |-- endS_p10: double (nullable = true)\n |-- endS_p50: double (nullable = true)\n |-- endS_p90: double (nullable = true)\n |-- minS_p10: double (nullable = true)\n |-- minS_p50: double (nullable = true)\n |-- minS_p90: double (nullable = true)\n |-- maxS_p10: double (nullable = true)\n |-- maxS_p50: double (nullable = true)\n |-- maxS_p90: double (nullable = true)\n |-- meanSS_p10: double (nullable = true)\n |-- meanSS_p50: double (nullable = true)\n |-- meanSS_p90: double (nullable = true)\n |-- stdS_p10: double (nullable = true)\n |-- stdS_p50: double (nullable = true)\n |-- stdS_p90: double (nullable = true)\n |-- startE_p50: double (nullable = true)\n |-- endE_p50: double (nullable = true)\n |-- minE_p50: double (nullable = true)\n |-- maxE_p50: double (nullable = true)\n |-- meanE_p50: double (nullable = true)\n |-- stdE_p50: double (nullable = true)\n |-- startC_p10: double (nullable = true)\n |-- startC_p50: double (nullable = true)\n |-- startC_p90: double (nullable = true)\n |-- endC_p10: double (nullable = true)\n |-- endC_p50: double (nullable = true)\n |-- endC_p90: double (nullable = true)\n |-- minC_p10: double (nullable = true)\n |-- minC_p50: double (nullable = true)\n |-- minC_p90: double (nullable = true)\n |-- maxC_p10: double (nullable = true)\n |-- maxC_p50: double (nullable = true)\n |-- maxC_p90: double (nullable = true)\n |-- meanC_p10: double (nullable = true)\n |-- meanC_p50: double (nullable = true)\n |-- meanC_p90: double (nullable = true)\n |-- stdC_p10: double (nullable = true)\n |-- stdC_p50: double (nullable = true)\n |-- stdC_p90: double (nullable = true)\n |-- startH_p10: double (nullable = true)\n |-- startH_p50: double (nullable = true)\n |-- startH_p90: double (nullable = true)\n |-- endH_p10: double (nullable = true)\n |-- endH_p50: double (nullable = true)\n |-- endH_p90: double (nullable = true)\n |-- minH_p10: double (nullable = true)\n |-- minH_p50: double (nullable = true)\n |-- minH_p90: double (nullable = true)\n |-- maxH_p10: double (nullable = true)\n |-- maxH_p50: double (nullable = true)\n |-- maxH_p90: double (nullable = true)\n |-- meanH_p10: double (nullable = true)\n |-- meanH_p50: double (nullable = true)\n |-- meanH_p90: double (nullable = true)\n |-- stdH_p10: double (nullable = true)\n |-- stdH_p50: double (nullable = true)\n |-- stdH_p90: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1575326596663_2003859814","id":"20191202-224316_1793050355","dateCreated":"2019-12-02T22:43:16+0000","dateStarted":"2019-12-04T23:58:24+0000","dateFinished":"2019-12-04T23:58:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87194"},{"text":"val cols = df.schema.names.filter(_ != \"edgeUID\")\nval imputeCols = cols.filter(_ != \"totalTraversals\")","user":"anonymous","dateUpdated":"2019-12-05T16:23:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cols: Array[String] = Array(totalTraversals, meanD_p10, meanD_p50, meanD_p90, t_p10, t_p50, t_p90, meanS_p10, meanS_p50, meanS_p90, startS_p10, startS_p50, startS_p90, endS_p10, endS_p50, endS_p90, minS_p10, minS_p50, minS_p90, maxS_p10, maxS_p50, maxS_p90, meanSS_p10, meanSS_p50, meanSS_p90, stdS_p10, stdS_p50, stdS_p90, startE_p50, endE_p50, minE_p50, maxE_p50, meanE_p50, stdE_p50, startC_p10, startC_p50, startC_p90, endC_p10, endC_p50, endC_p90, minC_p10, minC_p50, minC_p90, maxC_p10, maxC_p50, maxC_p90, meanC_p10, meanC_p50, meanC_p90, stdC_p10, stdC_p50, stdC_p90, startH_p10, startH_p50, startH_p90, endH_p10, endH_p50, endH_p90, minH_p10, minH_p50, minH_p90, maxH_p10, maxH_p50, maxH_p90, meanH_p10, meanH_p50, meanH_p90, stdH_p10, stdH_p50, stdH_p90)\nimputeCols: Array[String] = Array(meanD_p10, meanD_p50, meanD_p90, t_p10, t_p50, t_p90, meanS_p10, meanS_p50, meanS_p90, startS_p10, startS_p50, startS_p90, endS_p10, endS_p50, endS_p90, minS_p10, minS_p50, minS_p90, maxS_p10, maxS_p50, maxS_p90, meanSS_p10, meanSS_p50, meanSS_p90, stdS_p10, stdS_p50, stdS_p90, startE_p50, endE_p50, minE_p50, maxE_p50, meanE_p50, stdE_p50, startC_p10, startC_p50, startC_p90, endC_p10, endC_p50, endC_p90, minC_p10, minC_p50, minC_p90, maxC_p10, maxC_p50, maxC_p90, meanC_p10, meanC_p50, meanC_p90, stdC_p10, stdC_p50, stdC_p90, startH_p10, startH_p50, startH_p90, endH_p10, endH_p50, endH_p90, minH_p10, minH_p50, minH_p90, maxH_p10, maxH_p50, maxH_p90, meanH_p10, meanH_p50, meanH_p90, stdH_p10, stdH_p50, stdH_p90)\n"}]},"apps":[],"jobName":"paragraph_1575503937522_-1703345113","id":"20191204-235857_904207388","dateCreated":"2019-12-04T23:58:57+0000","dateStarted":"2019-12-05T16:23:24+0000","dateFinished":"2019-12-05T16:23:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87195"},{"text":"import org.apache.spark.ml.feature.{Imputer, VectorAssembler}\n\n// sanity check and think more about how to impute\nval imputer = new Imputer()\n  .setInputCols(imputeCols)\n  .setOutputCols(imputeCols)\n\nval imputerModel = imputer.fit(df)\n\nval assembler = new VectorAssembler()\n  .setInputCols(cols)\n  .setOutputCol(\"features\")\n\nval imputedDf = imputerModel.transform(df)\n","user":"anonymous","dateUpdated":"2019-12-05T16:26:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{Imputer, VectorAssembler}\nimputer: org.apache.spark.ml.feature.Imputer = imputer_db4f8acd43f3\nimputerModel: org.apache.spark.ml.feature.ImputerModel = imputer_db4f8acd43f3\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_6e953d8e7746\nimputedDf: org.apache.spark.sql.DataFrame = [edgeUID: bigint, totalTraversals: bigint ... 69 more fields]\n"}]},"apps":[],"jobName":"paragraph_1575503933521_-1398062446","id":"20191204-235853_251420697","dateCreated":"2019-12-04T23:58:53+0000","dateStarted":"2019-12-05T16:25:11+0000","dateFinished":"2019-12-05T16:25:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87196"},{"text":"val output = assembler.transform(imputedDf).drop(cols: _*)\noutput.printSchema","user":"anonymous","dateUpdated":"2019-12-05T16:28:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"output: org.apache.spark.sql.DataFrame = [edgeUID: bigint, features: vector]\nroot\n |-- edgeUID: long (nullable = true)\n |-- features: vector (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1575563124141_5308472","id":"20191205-162524_69007941","dateCreated":"2019-12-05T16:25:24+0000","dateStarted":"2019-12-05T16:28:29+0000","dateFinished":"2019-12-05T16:28:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87197"},{"text":"val vecToArrayUDF = udf{ x: Vector => x.toArray}\n\nval result = output.withColumn(\"featuresArray\", vecToArrayUDF(col(\"features\"))).drop(\"features\")","user":"anonymous","dateUpdated":"2019-12-05T20:47:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"vecToArrayUDF: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(DoubleType,false),Some(List(org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7)))\nresult: org.apache.spark.sql.DataFrame = [edgeUID: bigint, featuresArray: array<double>]\n"}]},"apps":[],"jobName":"paragraph_1575578815797_779267934","id":"20191205-204655_149933262","dateCreated":"2019-12-05T20:46:55+0000","dateStarted":"2019-12-05T20:47:39+0000","dateFinished":"2019-12-05T20:47:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87198"},{"text":"// sanity check vector size\nimport org.apache.spark.sql.Row\nimport org.apache.spark.ml.linalg.Vector\nimport org.apache.spark.sql.functions._\n\n\noutput.select(\"features\").map{case Row(v: Vector) => v.size}.\nagg(max(\"value\"), min(\"value\")).collect\n\nresult.select(\"featuresArray\").as[Array[Double]].map{_.size}.\nagg(max(\"value\"), min(\"value\")).collect","user":"anonymous","dateUpdated":"2019-12-05T20:49:04+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Row\nimport org.apache.spark.ml.linalg.Vector\nimport org.apache.spark.sql.functions._\nres131: Array[org.apache.spark.sql.Row] = Array([70,70])\n"}]},"apps":[],"jobName":"paragraph_1575351376190_454510051","id":"20191203-053616_376474485","dateCreated":"2019-12-03T05:36:16+0000","dateStarted":"2019-12-05T20:48:50+0000","dateFinished":"2019-12-05T20:48:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87199"},{"text":"output.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/edgeFeature\")\nresult.repartition(1).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/edgeFeatureArray\")\n","user":"anonymous","dateUpdated":"2019-12-05T20:50:00+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1575504276781_-1212773235","id":"20191205-000436_1842344095","dateCreated":"2019-12-05T00:04:36+0000","dateStarted":"2019-12-05T20:50:00+0000","dateFinished":"2019-12-05T20:50:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87200"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1575578989791_1713277531","id":"20191205-204949_1889121355","dateCreated":"2019-12-05T20:49:49+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:87201"}],"name":"/lucindaz/EdgeFeature","id":"2ETSTR26E","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}