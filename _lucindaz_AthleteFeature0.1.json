{"paragraphs":[{"text":"import com.strava.commons.spark.util.SnowflakeQuery\n\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\n","user":"anonymous","dateUpdated":"2019-12-20T00:25:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.strava.commons.spark.util.SnowflakeQuery\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\n"}]},"apps":[],"jobName":"paragraph_1576697948357_306095434","id":"20191125-201541_1488915145","dateCreated":"2019-12-18T19:39:08+0000","dateStarted":"2019-12-20T00:25:34+0000","dateFinished":"2019-12-20T00:25:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:71623"},{"text":"// VERSION 2: generate features by aggregating activites table\n\n// pull all activites for given athlete_id, partition by athlete_id and save it to S3\n\nimport spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\n\n// pull athlete ids\nspark.read.load(\"s3a://strava.scratch/gbm/bay-area/athleteRollUp\").select(\"ATHLETE_ID\").createOrReplaceTempView(\"temp\")\nval idDF = spark.sql(\"select bigint(ATHLETE_ID) from temp\")\nidDF.printSchema\n\n","user":"anonymous","dateUpdated":"2019-12-18T19:41:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import spark.implicits._\nimport org.apache.spark.sql.{DataFrame, SaveMode}\nimport org.apache.spark.sql.functions._\nidDF: org.apache.spark.sql.DataFrame = [ATHLETE_ID: bigint]\nroot\n |-- ATHLETE_ID: long (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1576697948384_-747439524","id":"20191205-204330_1195185003","dateCreated":"2019-12-18T19:39:08+0000","dateStarted":"2019-12-18T19:41:13+0000","dateFinished":"2019-12-18T19:41:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71624"},{"text":"\nSnowflakeQuery.write(idDF,\n            \"sandbox.route_eta_athlete_ids\",\n            SaveMode.Overwrite)\n","user":"anonymous","dateUpdated":"2019-12-18T19:39:08+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import net.snowflake.spark.snowflake.Utils.SNOWFLAKE_SOURCE_NAME\n"}]},"apps":[],"jobName":"paragraph_1576697948386_1778592421","id":"20191216-225813_1677635084","dateCreated":"2019-12-18T19:39:08+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:71625"},{"text":"import com.strava.commons.spark.util.SnowflakeQuery\n\nval mySnowQuery = \"\"\"\nselect\nID as ACTIVITY_ID, TYPE,  a.ATHLETE_ID,  START_DATE, WORKOUT_TYPE,\nCOMMUTE, BIKE_WEIGHT, ATHLETE_WEIGHT,\nHAS_DISTANCE, HAS_HEARTRATE, HAS_ALTITUDE,  HAS_TEMP, HAS_CADENCE,  HAS_WATTS,\nDISTANCE, MOVING_TIME, ELAPSED_TIME, ELEV_GAIN, DISTANCE / MOVING_TIME AS SPEED1, DISTANCE / ELAPSED_TIME AS SPEED2,\nMAX_GRADE, SUFFER_SCORE, MAX_CADENCE,  AVG_WATTS, AVG_TEMP, AVG_CADENCE,\nMAX_HR, RECORDS, STRESS_SCORE, ELEV_HIGH, ELEV_LOW,  AVG_GRADE, AVG_WATTS_CALC, MAX_SPEED, AVG_HR\n\nfrom STRAVA.PUBLIC.ACTIVITIES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.HAS_DISTANCE\nand a.MOVING_TIME > 0 and a.ELAPSED_TIME > 0\nand a.ATHLETE_ID = b.ATHLETE_ID\n\"\"\"\n\nval activities = SnowflakeQuery.read(mySnowQuery)\n","user":"anonymous","dateUpdated":"2019-12-18T19:39:08+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.strava.commons.spark.util.SnowflakeQuery\nmySnowQuery: String =\n\"\nselect\nID as ACTIVITY_ID, TYPE,  a.ATHLETE_ID,  START_DATE, WORKOUT_TYPE,\nCOMMUTE, BIKE_WEIGHT, ATHLETE_WEIGHT,\nHAS_DISTANCE, HAS_HEARTRATE, HAS_ALTITUDE,  HAS_TEMP, HAS_CADENCE,  HAS_WATTS,\nDISTANCE, MOVING_TIME, ELAPSED_TIME, ELEV_GAIN, DISTANCE / MOVING_TIME AS SPEED1, DISTANCE / ELAPSED_TIME AS SPEED2,\nMAX_GRADE, SUFFER_SCORE, MAX_CADENCE,  AVG_WATTS, AVG_TEMP, AVG_CADENCE,\nMAX_HR, RECORDS, STRESS_SCORE, ELEV_HIGH, ELEV_LOW,  AVG_GRADE, AVG_WATTS_CALC, MAX_SPEED, AVG_HR\n\nfrom STRAVA.PUBLIC.ACTIVITIES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.HAS_DISTANCE\nand a.MOVING_TIME > 0 and a.ELAPSED_TIME > 0\nand a.ATHLETE_ID = b.ATHLETE_ID\n\"\nactivities: org.apache.spark.sql.DataFrame = [ACTIVITY_ID: decimal(38,0), TYPE: string ... 33 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576697948389_1889586191","id":"20191216-210305_1213876039","dateCreated":"2019-12-18T19:39:08+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:71626"},{"text":"activities.repartition(100, col(\"ATHLETE_ID\")).write.mode(SaveMode.Overwrite).option(\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/activities\")","user":"anonymous","dateUpdated":"2020-01-03T18:15:00+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1576697948392_-1798678841","id":"20191216-215513_578812424","dateCreated":"2019-12-18T19:39:08+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:71627"},{"text":"// pull meta fature\n\nval myQuery = \"\"\"\nselect a.ID as athleteId,\nas_double(datediff(year, a.DATEOFBIRTH, '2019-12-01 14:39:20'::timestamp)) as age,\nas_double(datediff(year,  c.REG_DATE, '2019-12-01 14:39:20'::timestamp)) as reg_age,\na.SEX,\nas_double(iff(a.PRO=2, 1, 0)) as IS_PRO,\nas_double(a.MAX_HEARTRATE) as max_heartrate,\nas_double(a.ATHLETE_TYPE) as athlete_type,\nc.PRIMARY_SPORT\nfrom STRAVA.PUBLIC.ATHLETES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.ID = b.ATHLETE_ID\njoin STRAVA.PUBLIC.ATHLETE_DAILY_ROLLUP c\non a.ID = c.ATHLETE_ID\n\"\"\"\nval athleteMeta = SnowflakeQuery.read(myQuery)\n\nathleteMeta.repartition(1).write.mode(SaveMode.Overwrite).option(s\"compression\", \"gzip\").parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/metaFeature\")","user":"anonymous","dateUpdated":"2019-12-20T00:26:01+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myQuery: String =\n\"\nselect a.ID as athleteId,\nas_double(datediff(year, a.DATEOFBIRTH, '2019-12-01 14:39:20'::timestamp)) as age,\nas_double(datediff(year,  c.REG_DATE, '2019-12-01 14:39:20'::timestamp)) as reg_age,\na.SEX,\nas_double(iff(a.PRO=2, 1, 0)) as IS_PRO,\nas_double(a.MAX_HEARTRATE) as max_heartrate,\nas_double(a.ATHLETE_TYPE) as athlete_type,\nc.PRIMARY_SPORT\nfrom STRAVA.PUBLIC.ATHLETES a\njoin STRAVA.SANDBOX.ROUTE_ETA_ATHLETE_IDS b\non a.ID = b.ATHLETE_ID\njoin STRAVA.PUBLIC.ATHLETE_DAILY_ROLLUP c\non a.ID = c.ATHLETE_ID\n\"\nathleteMeta: org.apache.spark.sql.DataFrame = [ATHLETEID: decimal(38,0), AGE: double ... 6 more fields]\nroot\n |-- ATHLETEID: decimal(38,0) (nullable = false)\n |-- AGE: double (nullable = true)\n |-- REG_AGE: double (nullable = true)\n |-- SEX: string (nullable = true)\n |-- IS_PRO: double (nullable = true)\n |-- MAX_HEARTRATE: double (nullable = true)\n |-- ATHLETE_TYPE: double (nullable = true)\n |-- PRIMARY_SPORT: string (nullable = true)\n\n+---------+----+-------+---+------+-------------+------------+-------------+\n|ATHLETEID| AGE|REG_AGE|SEX|IS_PRO|MAX_HEARTRATE|ATHLETE_TYPE|PRIMARY_SPORT|\n+---------+----+-------+---+------+-------------+------------+-------------+\n| 10270421|  20|      4|  F|     0|          190|           0|       runner|\n|  6184904|  60|      5|  F|     0|          190|           1|  multi_sport|\n| 29918039|  24|      1|  M|     0|          190|           1|       runner|\n| 19872791|  49|      2|  M|     0|          190|           1|       runner|\n| 38666285|  39|      0|  M|     0|          190|           1|       runner|\n| 32963482|  30|      1|  F|     0|          190|           1|       runner|\n| 19873225|null|      2|  M|     0|         null|           0|       runner|\n| 14333533|  47|      3|  M|     0|          190|           1|       runner|\n| 12198486|  29|      4|  M|     0|          190|           1|       runner|\n|  6942709|  43|      5|  M|     0|         null|           0|       runner|\n| 25725554|null|      2|  F|     0|         null|           1|       runner|\n| 22356991|  38|      2|  M|     0|          190|           1|       runner|\n|  1885392|  34|      6|  M|     0|          200|           0|      cyclist|\n|   999806|null|      7|  F|     0|          180|           0|  multi_sport|\n| 14701387|null|      3|  M|     0|         null|           1|       runner|\n|  4495121|null|      5|  M|     0|          190|           1|  multi_sport|\n| 10883399|null|      4|  M|     0|         null|           1|       runner|\n| 46391653|  15|      0|  F|     0|          190|           1|       runner|\n|  1016906|  58|      7|  M|     0|          175|           0|  multi_sport|\n|   367045|  28|      7|  M|     0|         null|           0|       runner|\n+---------+----+-------+---+------+-------------+------------+-------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1576697948395_2025707267","id":"20191217-204742_735405328","dateCreated":"2019-12-18T19:39:08+0000","dateStarted":"2019-12-18T20:52:31+0000","dateFinished":"2019-12-18T20:52:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71628"},{"text":"// pull stat features\nval activityDf = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/activitiesSample\")\nactivityDf.createOrReplaceTempView(\"activities\")\n","user":"anonymous","dateUpdated":"2019-12-18T21:23:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"activityDf: org.apache.spark.sql.DataFrame = [ACTIVITY_ID: decimal(38,0), TYPE: string ... 33 more fields]\n"}]},"apps":[],"jobName":"paragraph_1576697948398_-871685830","id":"20191216-215534_1163700043","dateCreated":"2019-12-18T19:39:08+0000","dateStarted":"2019-12-18T21:23:30+0000","dateFinished":"2019-12-18T21:23:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71629"},{"text":"def statQuery1(datestr: String): String = {\n    val myQuery = s\"\"\"\nselect\nATHLETE_ID,\n\n\nsum(if(TYPE = 'Ride' and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_ride_90day,\nsum(if(TYPE = 'Ride' and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_ride_180day,\nsum(if(TYPE = 'Ride' and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_ride_365day,\nsum(if(TYPE = 'Ride' and START_DATE >= date_sub('$datestr', 180), DISTANCE, 0)) as distance_ride_180day,\n\n\nsum(if(TYPE = 'Swim' and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_swim_90day,\nsum(if(TYPE = 'Swim' and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_swim_180day,\nsum(if(TYPE = 'Swim' and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_swim_365day,\nsum(if(TYPE = 'Swim' and START_DATE >= date_sub('$datestr', 180), DISTANCE, 0)) as distance_swim_180day,\n\n\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1 and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_race_90day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1 and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_race_180day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1 and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_race_365day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 1 and START_DATE >= date_sub('$datestr', 180), DISTANCE, 0)) as distance_race_180day,\n\n\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2 and START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_long_run_90day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2 and START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_long_run_180day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2 and START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_long_run_365day,\nsum(if(TYPE = 'Run' and WORKOUT_TYPE = 2 and START_DATE >= date_sub('$datestr', 180), DISTANCE, 0)) as distance_longrun_180day,\n\n\nsum(if(START_DATE >= date_sub('$datestr', 90), 1, 0)) as num_activities_90day,\nsum(if(START_DATE >= date_sub('$datestr', 180), 1, 0)) as num_activities_180day,\nsum(if(START_DATE >= date_sub('$datestr', 365), 1, 0)) as num_activities_365day\nfrom activities\nwhere START_DATE < '$datestr'\ngroup by ATHLETE_ID\n\"\"\"\n    myQuery\n  }\n\n  def statQuery2(datestr: String, kmUpper: Int, kmLower: Int, interval: Int): String = {\n    val myQuery = s\"\"\"\nselect\nATHLETE_ID as athleteID,\n\nsum(if(TYPE = 'Run', 1, 0)) as num_${kmUpper}km_run_${interval}day,\nsum(if(TYPE = 'Run', DISTANCE, 0)) as total_distance_${kmUpper}km_run_${interval}day,\n\n\nmax(speed1) as max_speed1_${kmUpper}km_run_${interval}day,\nmin(speed1) as min_speed1_${kmUpper}km_run_${interval}day,\navg(speed1) as avg_speed1_${kmUpper}km_run_${interval}day,\n\nmax(speed2) as max_speed2_${kmUpper}km_run_${interval}day,\nmin(speed2) as min_speed2_${kmUpper}km_run_${interval}day,\navg(speed2) as avg_speed2_${kmUpper}km_run_${interval}day,\n\nmax(MAX_GRADE) as max_MAX_GRADE_${kmUpper}km_run_${interval}day,\nmin(MAX_GRADE) as min_MAX_GRADE_${kmUpper}km_run_${interval}day,\navg(MAX_GRADE) as avg_MAX_GRADE_${kmUpper}km_run_${interval}day,\n\n\nmax(double(SUFFER_SCORE)) as max_SUFFER_SCORE_${kmUpper}km_run_${interval}day,\nmin(double(SUFFER_SCORE)) as min_SUFFER_SCORE_${kmUpper}km_run_${interval}day,\navg(double(SUFFER_SCORE)) as avg_SUFFER_SCORE_${kmUpper}km_run_${interval}day,\n\nmax(MAX_CADENCE) as max_MAX_CADENCE_${kmUpper}km_run_${interval}day,\nmin(MAX_CADENCE) as min_MAX_CADENCE_${kmUpper}km_run_${interval}day,\navg(MAX_CADENCE) as avg_MAX_CADENCE_${kmUpper}km_run_${interval}day,\n\nmax(AVG_CADENCE) as max_AVG_CADENCE_${kmUpper}km_run_${interval}day,\nmin(AVG_CADENCE) as min_AVG_CADENCE_${kmUpper}km_run_${interval}day,\navg(AVG_CADENCE) as avg_AVG_CADENCE_${kmUpper}km_run_${interval}day,\n\nmax(MAX_HR) as max_MAX_HR_${kmUpper}km_run_${interval}day,\nmin(MAX_HR) as min_MAX_HR_${kmUpper}km_run_${interval}day,\navg(MAX_HR) as avg_MAX_HR_${kmUpper}km_run_${interval}day,\n\nmax(RECORDS) as max_RECORDS_${kmUpper}km_run_${interval}day,\nmin(RECORDS) as min_RECORDS_${kmUpper}km_run_${interval}day,\navg(RECORDS) as avg_RECORDS_${kmUpper}km_run_${interval}day,\n\nmax(AVG_GRADE) as max_AVG_GRADE_${kmUpper}km_run_${interval}day,\nmin(AVG_GRADE) as min_AVG_GRADE_${kmUpper}km_run_${interval}day,\navg(AVG_GRADE) as avg_AVG_GRADE_${kmUpper}km_run_${interval}day,\n\nmax(AVG_HR) as max_AVG_HR_${kmUpper}km_run_${interval}day,\nmin(AVG_HR) as min_AVG_HR_${kmUpper}km_run_${interval}day,\navg(AVG_HR) as avg_AVG_HR_${kmUpper}km_run_${interval}day,\n\nmax(MAX_SPEED) as max_MAX_SPEED_${kmUpper}km_run_${interval}day,\nmin(MAX_SPEED) as min_MAX_SPEED_${kmUpper}km_run_${interval}day,\navg(MAX_SPEED) as avg_MAX_SPEED_${kmUpper}km_run_${interval}day\nfrom activities\nwhere START_DATE < '$datestr' and START_DATE >= date_sub('$datestr', $interval)\nand TYPE = 'Run'\nand DISTANCE < ${kmUpper * 1000} and DISTANCE >= ${kmLower * 1000}\ngroup by ATHLETE_ID\n\"\"\"\n    myQuery\n  }\n\n  def athleteStatFeatures(datestr: String): DataFrame = {\n    // base stat\n    print(s\"date!!$datestr\")\n    var df = spark.sql(statQuery1(datestr))\n\n    var preKM = 0\n    val kms = Array(5, 15, 1000)\n    val intervals = Array (90, 360)\n\n    for (km <- kms ) {\n      val kmLower = preKM\n      val kmUpper = km\n      for (interval <- intervals) {\n        val myQuery = statQuery2(datestr=datestr, kmUpper=kmUpper, kmLower=kmLower, interval=interval)\n        val newFeature = spark.sql(myQuery)\n        df = df.join(newFeature, df(\"ATHLETE_ID\") === newFeature(\"athleteID\"), \"left_outer\").drop(\"athleteID\")\n        print(s\"KM{$km} interval{$interval}\")\n\n      }\n      preKM = km\n    }\n\n    df\n  }","user":"anonymous","dateUpdated":"2019-12-18T23:10:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"statQuery1: (datestr: String)String\nstatQuery2: (datestr: String, kmUpper: Int, kmLower: Int, interval: Int)String\nathleteStatFeatures: (datestr: String)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1576697948401_-1418364929","id":"20191218-184519_1845040986","dateCreated":"2019-12-18T19:39:08+0000","dateStarted":"2019-12-18T23:10:18+0000","dateFinished":"2019-12-18T23:10:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71630"},{"text":"val dateList = Array(\"2017-01-01\", \"2017-04-01\", \"2017-07-01\", \"2017-10-01\", \"2018-01-01\", \"2018-04-01\", \"2018-07-01\", \"2018-10-01\", \"2019-01-01\", \"2019-04-01\", \"2019-07-01\", \"2019-10-01\")\n\nfor (datestr <- dateList) {\n    val result = athleteStatFeatures(datestr)\n    val path = s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=$datestr\"\n    print(path)\n    result.repartition(1).write.mode(SaveMode.Overwrite).option(s\"compression\", \"gzip\").parquet(path)\n}\n","user":"anonymous","dateUpdated":"2019-12-18T23:16:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dateList: Array[String] = Array(2017-01-01, 2017-04-01, 2017-07-01, 2017-10-01, 2018-01-01, 2018-04-01, 2018-07-01, 2018-10-01, 2019-01-01, 2019-04-01, 2019-07-01, 2019-10-01)\ndate!!2017-01-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2017-01-01date!!2017-04-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2017-04-01date!!2017-07-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2017-07-01date!!2017-10-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2017-10-01date!!2018-01-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2018-01-01date!!2018-04-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2018-04-01date!!2018-07-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2018-07-01date!!2018-10-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2018-10-01date!!2019-01-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2019-01-01date!!2019-04-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2019-04-01date!!2019-07-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2019-07-01date!!2019-10-01KM{5} interval{90}KM{5} interval{360}KM{15} interval{90}KM{15} interval{360}KM{1000} interval{90}KM{1000} interval{360}s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2019-10-01"}]},"apps":[],"jobName":"paragraph_1576699385594_1495532930","id":"20191218-200305_1082756929","dateCreated":"2019-12-18T20:03:05+0000","dateStarted":"2019-12-18T23:16:48+0000","dateFinished":"2019-12-18T23:31:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71631"},{"text":"import org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.ml.linalg.{DenseVector, Vector, Vectors}\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{DecimalType, DoubleType, IntegerType, LongType}\n\nobject Utils {\n//   val arrayToVecUDF = udf{ x: Seq[Double] => Vectors.dense(x.toArray) }\n//   val vecToArrayUDF = udf{ x: Vector => x.toDense.toArray}\n\n  def bucketizeCol(x: DataFrame, cols: Array[String], splits: Array[Array[Double]]): DataFrame = {\n    // null is passed down as null\n    val bucketizer = new Bucketizer()\n      .setInputCols(cols)\n      .setOutputCols(cols.map(_ + \"_bucket\"))\n      .setSplitsArray(splits)\n      .setHandleInvalid(\"keep\")\n\n    bucketizer.transform(x).drop(cols: _*)\n\n  }\n\n\n  def indexString(x: DataFrame, cols: Array[String]): DataFrame = {\n    // null will have dedicated index\n    var df = x\n    cols.foreach { c =>\n      val indexer = new StringIndexer()\n        .setInputCol(c)\n        .setOutputCol(c + \"_index\")\n        .setHandleInvalid(\"keep\")\n\n      val fittedIndexer = indexer.fit(x)\n      df = fittedIndexer.transform(df).drop(c)\n    }\n    df\n  }\n\n  def encodeCol(x: DataFrame, cols: Array[String]): DataFrame = {\n    val encoder = new OneHotEncoderEstimator()\n      .setInputCols(cols)\n      .setOutputCols(cols.map(_ + \"_encode\"))\n    val fittedEncoder = encoder.fit(x)\n\n    fittedEncoder.transform(x).drop(cols: _*)\n  }\n\n\n  def imputeCol(x: DataFrame, cols: Array[String]): DataFrame = {\n    // all columns need to be float or double\n    val imputer = new Imputer()\n      .setInputCols(cols)\n      .setOutputCols(cols)\n    val model = imputer.fit(x)\n    model.transform(x)\n\n  }\n\n  def assembleFeature(x: DataFrame, featureCols: Array[String]): DataFrame = {\n    val assembler = new VectorAssembler()\n      .setInputCols(featureCols)\n      .setOutputCol(\"features\")\n\n    val output = assembler.transform(x)\n    output.drop(featureCols: _*)\n  }\n\n  def imputeByConstants(x: DataFrame, cols: Array[String]): DataFrame = {\n    var result = x\n    for (cc <- cols) {\n      result = result.na.fill(0, Seq(cc))\n    }\n    result\n  }\n\n  def castToDouble(x: DataFrame, cols: Array[String]): DataFrame = {\n    // case decimal, long, int to double\n    var result = x\n    // array of (name, DataType)\n    val colArray = x.schema.fields.filter(v => cols contains(v.name)).map{v => (v.name, v.dataType)}\n    for (e <- colArray) {\n      e._2 match {\n        case v: LongType => result = result.withColumn(e._1, col(e._1).cast(DoubleType))\n        case v: IntegerType => result = result.withColumn(e._1, col(e._1).cast(DoubleType))\n        case v: DecimalType => result = result.withColumn(e._1, col(e._1).cast(DoubleType))\n        case default => default\n      }\n    }\n    result\n  }\n}","user":"anonymous","dateUpdated":"2019-12-19T23:51:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.{Bucketizer, Imputer, OneHotEncoderEstimator, StringIndexer, VectorAssembler}\nimport org.apache.spark.ml.linalg.{DenseVector, Vector, Vectors}\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{DecimalType, DoubleType, IntegerType, LongType}\ndefined object Utils\n"}]},"apps":[],"jobName":"paragraph_1576704288549_1580690628","id":"20191218-212448_2059185760","dateCreated":"2019-12-18T21:24:48+0000","dateStarted":"2019-12-19T23:49:15+0000","dateFinished":"2019-12-19T23:49:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71632"},{"text":"val metaFeature = spark.read.load(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/metaFeature\")\n\n  val metaStrCols = Array(\"SEX\", \"PRIMARY_SPORT\")\n  val metaNumericCols = Array(\n    \"AGE\",\n    \"REG_AGE\",\n    \"MAX_HEARTRATE\"\n  )\n\n  def transformMetaFeature(df: DataFrame): DataFrame = {\n    val df1 = Utils.indexString(df, metaStrCols)\n    val df2 = Utils.encodeCol(df1, metaStrCols.map(_ + \"_index\"))\n    Utils.imputeCol(df2, metaNumericCols)\n  }","user":"anonymous","dateUpdated":"2019-12-19T21:36:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"metaFeature: org.apache.spark.sql.DataFrame = [ATHLETEID: decimal(38,0), AGE: double ... 6 more fields]\nmetaStrCols: Array[String] = Array(SEX, PRIMARY_SPORT)\nmetaNumericCols: Array[String] = Array(AGE, REG_AGE, MAX_HEARTRATE)\ntransformMetaFeature: (df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1576713404238_829870570","id":"20191218-235644_1906841981","dateCreated":"2019-12-18T23:56:44+0000","dateStarted":"2019-12-19T19:26:43+0000","dateFinished":"2019-12-19T19:26:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71633"},{"text":"\nval df3 = transformMetaFeature(metaFeature)\nval featureCols = df3.schema.names.filter(v => !(Array(\"athlete_id\", \"athleteid\") contains v.toLowerCase()))\nval result = Utils.assembleFeature(df3, featureCols)\n\nresult.repartition(1).write.mode(SaveMode.Overwrite).option(s\"compression\", \"gzip\").parquet(\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/metaFeatureVector/\")\n","user":"anonymous","dateUpdated":"2019-12-19T22:32:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"vecToArrayUDF: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(DoubleType,false),Some(List(org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7)))\ndf3: org.apache.spark.sql.DataFrame = [ATHLETEID: decimal(38,0), AGE: double ... 6 more fields]\nfeatureCols: Array[String] = Array(AGE, REG_AGE, IS_PRO, MAX_HEARTRATE, ATHLETE_TYPE, SEX_index_encode, PRIMARY_SPORT_index_encode)\nresult: org.apache.spark.sql.DataFrame = [ATHLETEID: decimal(38,0), features: vector]\n"}]},"apps":[],"jobName":"paragraph_1576714003077_1249071939","id":"20191219-000643_475731860","dateCreated":"2019-12-19T00:06:43+0000","dateStarted":"2019-12-19T19:26:54+0000","dateFinished":"2019-12-19T19:26:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71634"},{"text":"  def transformStatFeature(df: DataFrame): DataFrame = {\n    val cols = df.schema.names.filter(v => !(Array(\"athlete_id\", \"athleteid\") contains v.toLowerCase()))\n    val df1 = Utils.castToDouble(df, cols)\n    val df2 = Utils.imputeByConstants(df1, cols)\n    df2\n  }","user":"anonymous","dateUpdated":"2019-12-19T23:50:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"transformStatFeature: (df: org.apache.spark.sql.DataFrame)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1576714468480_-599020436","id":"20191219-001428_1945657524","dateCreated":"2019-12-19T00:14:28+0000","dateStarted":"2019-12-19T23:50:47+0000","dateFinished":"2019-12-19T23:50:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71635"},{"text":"val metaFeatureDf = spark.read.parquet(\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/metaFeatureVector/\")\nmetaFeatureDf.createOrReplaceTempView(\"meta\")\n\n// val dateList = Array(\"2017-01-01\", \"2017-04-01\", \"2017-07-01\", \"2017-10-01\", \"2018-01-01\", \"2018-04-01\", \"2018-07-01\", \"2018-10-01\", \"2019-01-01\", \"2019-04-01\", \"2019-07-01\", \"2019-10-01\")\nval dateList = Array(\"2019-10-01\")\nfor (datestr <- dateList) {\n    val path = s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=$datestr\"\n    print(path)\n    val df = spark.read.load(path)\n    val cols = df.schema.names.filter(v => !(Array(\"athlete_id\", \"athleteid\") contains v.toLowerCase()))\n    val statFeatureVector = Utils.assembleFeature(transformStatFeature(statFeature), cols)\n    statFeatureVector.createOrReplaceTempView(\"stat\")\n    val result = spark.sql(\"select stat.ATHLETE_ID, meta.features as feature1, stat.features as feature2 from meta join stat on meta.ATHLETEID = stat.ATHLETE_ID\") \n    val output = Utils.assembleFeature(result, Array(\"feature1\", \"feature2\"))\n    output.printSchema\n    output.count\n    output.repartition(1).write.mode(SaveMode.Overwrite).option(s\"compression\", \"gzip\").\n    parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/featureVector/datestr=$datestr\")\n}","user":"anonymous","dateUpdated":"2019-12-20T16:44:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"metaFeatureDf: org.apache.spark.sql.DataFrame = [ATHLETEID: decimal(38,0), features: vector]\ndateList: Array[String] = Array(2019-10-01)\ns3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/statFeature/datestr=2019-10-01[Lscala.Tuple2;@6626b038root\n |-- ATHLETE_ID: decimal(38,0) (nullable = true)\n |-- features: vector (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1576799720046_-604335527","id":"20191219-235520_1198082733","dateCreated":"2019-12-19T23:55:20+0000","dateStarted":"2019-12-20T16:44:01+0000","dateFinished":"2019-12-20T16:44:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71636"},{"text":"spark.read.parquet(s\"s3a://strava.scratch/gbm/bay-area/athleteFeatureV0.1/featureVector/datestr=2019-10-01\").count\n","user":"anonymous","dateUpdated":"2019-12-20T16:47:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res66: Long = 122787\n"}]},"apps":[],"jobName":"paragraph_1576800566581_1122101628","id":"20191220-000926_162157254","dateCreated":"2019-12-20T00:09:26+0000","dateStarted":"2019-12-20T16:47:38+0000","dateFinished":"2019-12-20T16:47:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71637"}],"name":"/lucindaz/AthleteFeature0.1","id":"2EX94NBWA","noteParams":{},"noteForms":{},"angularObjects":{"snowflake:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}